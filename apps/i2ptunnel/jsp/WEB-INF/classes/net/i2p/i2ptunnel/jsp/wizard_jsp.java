/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package net.i2p.i2ptunnel.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import net.i2p.i2ptunnel.web.EditBean;

public final class wizard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/headers.jsi", Long.valueOf(1607264743000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("net.i2p.i2ptunnel.web.EditBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


    // NOTE: Do the header carefully so there is no whitespace before the <?xml... line

    // http://www.crazysquirrel.com/computing/general/form-encoding.jspx
    if (request.getCharacterEncoding() == null)
        request.setCharacterEncoding("UTF-8");

    response.setHeader("X-Frame-Options", "SAMEORIGIN");
    response.setHeader("Content-Security-Policy", "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'none'; frame-ancestors 'self'; object-src 'none'; media-src 'none'");
    response.setHeader("X-XSS-Protection", "1; mode=block");
    response.setHeader("X-Content-Type-Options", "nosniff");
    response.setHeader("Referrer-Policy", "no-referrer");
    response.setHeader("Accept-Ranges", "none");


      out.write('\n');
      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n");
      net.i2p.i2ptunnel.web.EditBean editBean = null;
      editBean = (net.i2p.i2ptunnel.web.EditBean) _jspx_page_context.getAttribute("editBean", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (editBean == null){
        editBean = new net.i2p.i2ptunnel.web.EditBean();
        _jspx_page_context.setAttribute("editBean", editBean, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\n');
      net.i2p.i2ptunnel.ui.Messages intl = null;
      intl = (net.i2p.i2ptunnel.ui.Messages) _jspx_page_context.getAttribute("intl", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (intl == null){
        intl = new net.i2p.i2ptunnel.ui.Messages();
        _jspx_page_context.setAttribute("intl", intl, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\n');
 String pageStr = request.getParameter("page");
   /* Get the number of the page we came from */
   int lastPage = 0;
   if (pageStr != null) {
     try {
       lastPage = Integer.parseInt(pageStr);
       if (lastPage > 7 || lastPage < 0) {
         lastPage = 0;
       }
     } catch (NumberFormatException nfe) {
       lastPage = 0;
     }
   }
   /* Determine what page to display now */
   int curPage = 1;
   if ("Previous page".equals(request.getParameter("action"))) {
     curPage = lastPage - 1;
   } else {
     curPage = lastPage + 1;
   }
   if (curPage > 7 || curPage <= 0) {
     curPage = 1;
   }
   /* Fetch and format a couple of regularly-used values */
   boolean tunnelIsClient = Boolean.valueOf(request.getParameter("isClient"));
   String tunnelType = request.getParameter("type");
   tunnelType = net.i2p.data.DataHelper.stripHTML(tunnelType);
   /* Special case - don't display page 4 for server tunnels */
   if (curPage == 4 && !tunnelIsClient) {
     if ("Previous page".equals(request.getParameter("action"))) {
       curPage = curPage - 1;
     } else {
       curPage = curPage + 1;
     }
   }

      out.write("\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n    <title>");
      out.print(intl._t("I2P Tunnel Manager - Tunnel Creation Wizard"));
      out.write("</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <link href=\"/themes/console/images/favicon.ico\" type=\"image/x-icon\" rel=\"shortcut icon\" />\n    <link href=\"");
      out.print(editBean.getTheme());
      out.write("i2ptunnel.css?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" rel=\"stylesheet\" type=\"text/css\" />\n</head>\n<body id=\"tunnelWizardPage\">\n\n    <form method=\"post\" action=\"");
      out.print((curPage == 7 ? "list" : "wizard") );
      out.write("\">\n\n        <div id=\"wizardPanel\" class=\"panel\">\n\n                ");

                if (curPage == 1) {
                  
      out.write("<h2>");
      out.print(intl._t("Server or client tunnel?"));
      out.write("</h2>");

                } else if (curPage == 2) {
                  
      out.write("<h2>");
      out.print(intl._t("Tunnel type"));
      out.write("</h2>");

                } else if (curPage == 3) {
                  
      out.write("<h2>");
      out.print(intl._t("Tunnel name and description"));
      out.write("</h2>");

                } else if (curPage == 4 && tunnelIsClient) {
                  
      out.write("<h2>");
      out.print(intl._t("Tunnel destination"));
      out.write("</h2>");

                } else if (curPage == 5) {
                  
      out.write("<h2>");
      out.print(intl._t("Binding address and port"));
      out.write("</h2>");

                } else if (curPage == 6) {
                  
      out.write("<h2>");
      out.print(intl._t("Tunnel auto-start"));
      out.write("</h2>");

                } else if (curPage == 7) {
                  
      out.write("<h2>");
      out.print(intl._t("Wizard completed"));
      out.write("</h2>");

                } 
      out.write("\n                <input type=\"hidden\" name=\"page\" value=\"");
      out.print(curPage);
      out.write("\" />\n                <input type=\"hidden\" name=\"tunnel\" value=\"null\" />\n                <input type=\"hidden\" name=\"nonce\" value=\"");
      out.print(net.i2p.i2ptunnel.web.IndexBean.getNextNonce());
      out.write("\" />\n\n\n<table>\n            ");
 /* Page 1 - Whether to make a client or server tunnel */

            if (curPage == 1) {
            
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("This wizard will take you through the various options available for creating tunnels in I2P."));
      out.write("\n            </p>\n            <p>\n                ");
      out.print(intl._t("The first thing to decide is whether you want to create a server or a client tunnel."));
      out.write("\n                ");
      out.print(intl._t("If you need to connect to a remote service, such as an IRC server inside I2P or a code repository, then you will require a CLIENT tunnel."));
      out.write("\n                ");
      out.print(intl._t("On the other hand, if you wish to host a service for others to connect to you'll need to create a SERVER tunnel."));
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td class=\"options\">\n            <span class=\"multiOption\" id=\"isServer\">\n                <label><input value=\"false\" type=\"radio\" id=\"baseType\" name=\"isClient\" class=\"tickbox\" />\n                &nbsp;");
      out.print(intl._t("Server Tunnel"));
      out.write("</label>\n            </span>\n            <span class=\"multiOption\" id=\"isClient\">\n                <label><input value=\"true\" type=\"radio\" id=\"baseType\" name=\"isClient\" class=\"tickbox\" checked=\"checked\" />\n                &nbsp;");
      out.print(intl._t("Client Tunnel"));
      out.write("</label>\n            </span>\n        </td>\n    </tr>\n\n            ");

            } else {
            
      out.write("<input type=\"hidden\" name=\"isClient\" value=\"");
      out.print(tunnelIsClient);
      out.write("\" />");

            } /* curPage 1 */

               /* End page 1 */ 
      out.write("\n\n            ");
 /* Page 2 - Tunnel type */

            if (curPage == 2) {
            
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("There are several types of tunnels to choose from:"));
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td id=\"wizardTable\">\n            <table id=\"wizardTunnelTypes\">\n            ");

                if (tunnelIsClient) {
                
      out.write("\n                <tr><td>");
      out.print(intl._t("Standard"));
      out.write("</td><td>\n                    ");
      out.print(intl._t("Basic tunnel for connecting to a single service inside I2P."));
      out.write("\n                    ");
      out.print(intl._t("Try this if none of the tunnel types below fit your requirements, or you don't know what type of tunnel you need."));
      out.write("\n                </td></tr>\n                <tr><td>HTTP/HTTPS</td><td>\n                    ");
      out.print(intl._t("Tunnel that acts as an HTTP proxy for reaching eepsites inside I2P."));
      out.write("\n                    ");
      out.print(intl._t("Set your browser to use this tunnel as an http proxy, or set your \"http_proxy\" environment variable for command-line applications in GNU/Linux."));
      out.write("\n                    ");
      out.print(intl._t("Websites outside I2P can also be reached if an HTTP proxy within I2P is known."));
      out.write("\n                </td></tr>\n                <tr><td>IRC</td><td>\n                    ");
      out.print(intl._t("Customised client tunnel specific for IRC connections."));
      out.write("\n                    ");
      out.print(intl._t("With this tunnel type, your IRC client will be able to connect to an IRC network inside I2P."));
      out.write("\n                    ");
      out.print(intl._t("Each IRC network in I2P that you wish to connect to will require its own tunnel. (See Also, SOCKS IRC)"));
      out.write("\n                </td></tr>\n                <tr><td>SOCKS 4/4a/5</td><td>\n                    ");
      out.print(intl._t("A tunnel that implements the SOCKS protocol."));
      out.write("\n                    ");
      out.print(intl._t("This enables both TCP and UDP connections to be made through a SOCKS outproxy within I2P."));
      out.write("\n                </td></tr>\n                <tr><td>SOCKS IRC</td><td>\n                    ");
      out.print(intl._t("A client tunnel implementing the SOCKS protocol, which is customised for connecting to IRC networks."));
      out.write("\n                    ");
      out.print(intl._t("With this tunnel type, IRC networks in I2P can be reached by typing the I2P address into your IRC client, and configuring the IRC client to use this SOCKS tunnel."));
      out.write("\n                    ");
      out.print(intl._t("This means that only one I2P tunnel is required rather than a separate tunnel per IRC network."));
      out.write("\n                    ");
      out.print(intl._t("IRC networks outside I2P can also be reached if a SOCKS outproxy within I2P is known, though it depends on whether or not the outproxy has been blocked by the IRC network."));
      out.write("\n                </td></tr>");

                } else {
                
      out.write("\n                <tr><td>");
      out.print(intl._t("Standard"));
      out.write("</td><td>\n                    ");
      out.print(intl._t("A basic server tunnel for hosting a generic service inside I2P."));
      out.write("\n                    ");
      out.print(intl._t("Try this if none of the tunnel types below fit your requirements, or you don't know what type of tunnel you need."));
      out.write("\n                </td></tr>\n                <tr><td>HTTP</td><td>\n                    ");
      out.print(intl._t("A server tunnel that is customised for HTTP connections."));
      out.write("\n                    ");
      out.print(intl._t("Use this tunnel type if you want to host an eepsite."));
      out.write("\n                </td></tr>\n                <tr><td>IRC</td><td>\n                    ");
      out.print(intl._t("A customised server tunnel for hosting IRC networks inside I2P."));
      out.write("\n                    ");
      out.print(intl._t("Usually, a separate tunnel needs to be created for each IRC server that is to be accessible inside I2P."));
      out.write("\n                </td></tr>");

                }
                
      out.write("\n\n                <tr>\n                    <td>\n                        ");
      out.print(intl._t("Select tunnel type"));
      out.write(":\n                    </td>\n                    <td>\n                ");

                if (tunnelIsClient) {
                
      out.write("<select name=\"type\">\n                    <option value=\"client\">");
      out.print(intl._t("Standard"));
      out.write("</option>\n                    <option value=\"httpclient\">HTTP/HTTPS</option>\n                    <option value=\"ircclient\">IRC</option>\n                    <option value=\"sockstunnel\">SOCKS 4/4a/5</option>\n                    <option value=\"socksirctunnel\">SOCKS IRC</option>\n                </select>");

                } else {
                
      out.write("<select name=\"type\">\n                    <option value=\"server\">");
      out.print(intl._t("Standard"));
      out.write("</option>\n                    <option value=\"httpserver\">HTTP</option>\n                    <option value=\"ircserver\">IRC</option>\n                </select>");

                } /* tunnelIsClient */ 
      out.write("\n                    </td>\n                </tr>\n            </table>\n        </td>\n    </tr>\n            ");

            } else {
            
      out.write("<input type=\"hidden\" name=\"type\" value=\"");
      out.print(tunnelType);
      out.write("\" />");

            } /* curPage 2 */

               /* End page 2 */ 
      out.write("\n\n            ");
 /* Page 3 - Name and description */

            if (curPage == 3) {
            
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("Choose a name and description for your tunnel."));
      out.write("\n                ");
      out.print(intl._t("These can be anything you want - they are just for ease of identifying the tunnel in the routerconsole."));
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <span class=\"tag\">");
      out.print(intl._t("Name"));
      out.write(":</span>\n                <input type=\"text\" size=\"30\" maxlength=\"50\" name=\"name\" id=\"name\" placeholder=\"New Tunnel\" title=\"");
      out.print(intl._t("Name of tunnel to be displayed on Tunnel Manager home page and the router console sidebar"));
      out.write("\" value=\"");
      out.print((!"null".equals(request.getParameter("name")) ? net.i2p.data.DataHelper.stripHTML(request.getParameter("name")) : "" ) );
      out.write("\" class=\"freetext\" />\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <span class=\"tag\">");
      out.print(intl._t("Description"));
      out.write(":</span>\n                <input type=\"text\" size=\"60\" maxlength=\"80\" name=\"nofilter_description\"  id=\"description\" title=\"");
      out.print(intl._t("Description of tunnel to be displayed on Tunnel Manager home page"));
      out.write("\" value=\"");
      out.print((!"null".equals(request.getParameter("nofilter_description")) ? net.i2p.data.DataHelper.stripHTML(request.getParameter("nofilter_description")) : "" ) );
      out.write("\" class=\"freetext\" />\n        </td>\n    </tr>\n            ");

            } else {
            
      out.write("<input type=\"hidden\" name=\"name\" value=\"");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("name")));
      out.write("\" />\n            <input type=\"hidden\" name=\"nofilter_description\" value=\"");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("nofilter_description")));
      out.write("\" />");

            } /* curPage 3 */

               /* End page 3 */ 
      out.write("\n\n            ");
 /* Page 4 - Target destination or proxy list */

            if (tunnelIsClient) {
              if ("httpclient".equals(tunnelType) || "connectclient".equals(tunnelType) || "sockstunnel".equals(tunnelType) || "socksirctunnel".equals(tunnelType)) {
                if (curPage == 4) {
          
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("If you know of any outproxies for this type of tunnel (either HTTP or SOCKS), fill them in below."));
      out.write("\n                ");
      out.print(intl._t("Separate multiple proxies with commas."));
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <span class=\"tag\">");
      out.print(intl._t("Outproxies"));
      out.write(":</span>\n                <input type=\"text\" size=\"30\" id=\"proxyList\" name=\"proxyList\" title=\"");
      out.print(intl._t("List of I2P outproxy destinations, separated with commas (e.g. proxy1.i2p,proxy2.i2p)"));
      out.write("\" value=\"");
      out.print((!"null".equals(request.getParameter("proxyList")) ? net.i2p.data.DataHelper.stripHTML(request.getParameter("proxyList")) : "" ) );
      out.write("\" class=\"freetext\" />\n        </td>\n    </tr>\n            ");

                } else {
            
      out.write("<input type=\"hidden\" name=\"proxyList\" value=\"");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("proxyList")));
      out.write("\" />");

                } /* curPage 4 */
              } else if ("client".equals(tunnelType) || "ircclient".equals(tunnelType)) {
                if (curPage == 4) {
            
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("Type in the I2P destination of the service that this client tunnel should connect to."));
      out.write("\n                ");
      out.print(intl._t("This could be the full Base64 destination key, or an I2P URL from your address book."));
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <span class=\"tag\">");
      out.print(intl._t("Tunnel Destination"));
      out.write(":</span>\n                <input type=\"text\" size=\"30\" id=\"targetDestination\" name=\"targetDestination\" title=\"");
      out.print(intl._t("Enter a b64 or .i2p address here"));
      out.write("\" value=\"");
      out.print((!"null".equals(request.getParameter("targetDestination")) ? net.i2p.data.DataHelper.stripHTML(request.getParameter("targetDestination")) : "" ) );
      out.write("\" class=\"freetext\" />\n            &nbsp;(");
      out.print(intl._t("name, name:port, or destination"));
      out.write("\n                     )\n        </td>\n    </tr>\n            ");

                } else {
            
      out.write("<input type=\"hidden\" name=\"targetDestination\" value=\"");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("targetDestination")));
      out.write("\" />");

                } /* curPage 4 */
              }
            } /* tunnelIsClient */

               /* End page 4 */ 
      out.write("\n\n            ");
 /* Page 5 - Binding ports and addresses*/

            if (!tunnelIsClient) {
              if (curPage == 5) {
            
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("This is the IP that your service is running on, this is usually on the same machine so 127.0.0.1 is autofilled."));
      out.write("\n                ");
 //TODO For some reason streamrclient also uses this. 
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <span class=\"tag\">");
      out.print(intl._t("Host"));
      out.write(":</span>\n                <input type=\"text\" size=\"20\" id=\"targetHost\" name=\"targetHost\" title=\"");
      out.print(intl._t("Hostname or IP address of the target server"));
      out.write("\" placeholder=\"127.0.0.1\" value=\"");
      out.print((!"null".equals(request.getParameter("targetHost")) ? net.i2p.data.DataHelper.stripHTML(request.getParameter("targetHost")) : "127.0.0.1" ) );
      out.write("\" class=\"freetext\" />\n        </td>\n    </tr>\n            ");

              } else {
            
      out.write("<input type=\"hidden\" name=\"targetHost\" value=\"");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("targetHost")));
      out.write("\" />");

              } /* curPage 5 */
            } /* streamrclient or !streamrserver */ 
      out.write("\n            ");

            if (!tunnelIsClient) {
              if (curPage == 5) {
            
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("This is the port that the service is accepting connections on."));
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <span class=\"tag\">");
      out.print(intl._t("Port"));
      out.write(":</span>\n                <input type=\"text\" size=\"6\" maxlength=\"5\" id=\"targetPort\" name=\"targetPort\" title=\"");
      out.print(intl._t("Specify the port the server is running on"));
      out.write("\" value=\"");
      out.print((!"null".equals(request.getParameter("targetPort")) ? net.i2p.data.DataHelper.stripHTML(request.getParameter("targetPort")) : "" ) );
      out.write("\" class=\"freetext\" />\n        </td>\n    </tr>\n            ");

              } else {
            
      out.write("<input type=\"hidden\" name=\"targetPort\" value=\"");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("targetPort")));
      out.write("\" />");

              } /* curPage 5 */
            } /* !tunnelIsClient */ 
      out.write("\n            ");

            if (tunnelIsClient) {
              if (curPage == 5) {
            
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("This is the port that the client tunnel will be accessed from locally."));
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <span class=\"tag\">");
      out.print(intl._t("Port"));
      out.write(":</span>\n                <input type=\"text\" size=\"6\" maxlength=\"5\" id=\"port\" name=\"port\" title=\"");
      out.print(intl._t("Specify the local port this service should be accessible from"));
      out.write("\" value=\"");
      out.print((!"null".equals(request.getParameter("port")) ? net.i2p.data.DataHelper.stripHTML(request.getParameter("port")) : "" ) );
      out.write("\" class=\"freetext\" />\n        </td>\n    </tr>\n            ");

              } else {
            
      out.write("<input type=\"hidden\" name=\"port\" value=\"");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("port")));
      out.write("\" />");

              } /* curPage 5 */
            } /* tunnelIsClient or httpbidirserver */ 
      out.write("\n            ");

            if (tunnelIsClient) {
              if (curPage == 5) {
            
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("How do you want this tunnel to be accessed? By just this machine, your entire subnet, or external internet?"));
      out.write("\n                ");
      out.print(intl._t("You will most likely want to just allow 127.0.0.1"));

                //TODO Note that it is relevant to most Client tunnels, and httpbidirserver and streamrserver tunnels.
                //TODO So the wording may need to change slightly for the client vs. server tunnels. 
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <span class=\"tag\">");
      out.print(intl._t("Reachable by"));
      out.write(":</span>\n                <select id=\"reachableBy\" name=\"reachableBy\" title=\"");
      out.print(intl._t("Listening interface (IP address) for client access (normally 127.0.0.1)"));
      out.write("\" class=\"selectbox\">\n              ");

                    String clientInterface = request.getParameter("reachableBy");
                    if ("null".equals(clientInterface)) {
                      clientInterface = "127.0.0.1";
                    }
                    for (String ifc : editBean.interfaceSet()) {
                        out.write("<option value=\"");
                        out.write(ifc);
                        out.write('\"');
                        if (ifc.equals(clientInterface))
                            out.write(" selected=\"selected\"");
                        out.write('>');
                        out.write(ifc);
                        out.write("</option>\n");
                    }
              
      out.write("\n                </select>\n        </td>\n    </tr>\n               ");

              } else {
            
      out.write("<input type=\"hidden\" name=\"reachableBy\" value=\"");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("reachableBy")));
      out.write("\" />");

              } /* curPage 5 */
            } /* (tunnelIsClient && !streamrclient) ||  httpbidirserver || streamrserver */

               /* End page 5 */ 
      out.write("\n\n            ");
 /* Page 6 - Automatic start */

            if (curPage == 6) {
            
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("The I2P router can automatically start this tunnel for you when the router is started."));
      out.write("\n                ");
      out.print(intl._t("This can be useful for frequently-used tunnels (especially server tunnels), but for tunnels that are only used occassionally it would mean that the I2P router is creating and maintaining unnecessary tunnels."));
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td class=\"options\">\n                <label title=\"");
      out.print(intl._t("Enable this option to ensure this service is available when the router starts"));
      out.write("\"><input value=\"1\" type=\"checkbox\" id=\"startOnLoad\" name=\"startOnLoad\" ");
      out.print(("1".equals(request.getParameter("startOnLoad")) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n            &nbsp;");
      out.print(intl._t("Automatically start tunnel when router starts"));
      out.write("</label>\n        </td>\n    </tr>\n            ");

            } else {
              if ("1".equals(request.getParameter("startOnLoad"))) {
            
      out.write("<input type=\"hidden\" name=\"startOnLoad\" value=\"");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("startOnLoad")));
      out.write("\" />");

              }
            } /* curPage 6 */

               /* End page 6 */ 
      out.write("\n\n            ");
 /* Page 7 - Wizard complete */

            if (curPage == 7) {
            
      out.write("\n    <tr>\n        <td>\n            <p>\n                ");
      out.print(intl._t("The wizard has now collected enough information to create your tunnel."));
      out.write("\n                ");
      out.print(intl._t("Upon clicking the Save button below, the wizard will set up the tunnel, and take you back to the main I2PTunnel page."));
      out.write("\n                ");

                if ("1".equals(request.getParameter("startOnLoad"))) {
                
      out.print(intl._t("Because you chose to automatically start the tunnel when the router starts, you don't have to do anything further."));
      out.write("\n                ");
      out.print(intl._t("The router will start the tunnel once it has been set up."));

                } else {
                
      out.print(intl._t("Because you chose not to automatically start the tunnel, you will have to manually start it."));
      out.write("\n                ");
      out.print(intl._t("You can do this by clicking the Start button on the main page which corresponds to the new tunnel."));

                } 
      out.write("\n            </p>\n            <p>\n                ");
      out.print(intl._t("Below is a summary of the options you chose:"));
      out.write("\n            </p>\n        </td>\n    </tr>\n    <tr>\n        <td id=\"wizardTable\">\n            <table id=\"wizardSummary\">\n                <tr><td>");
      out.print(intl._t("Server or client tunnel?"));
      out.write("</td><td>\n                    ");
      out.print((tunnelIsClient ? "Client" : "Server"));
      out.write("\n                </td></tr>\n                <tr><td>");
      out.print(intl._t("Tunnel type"));
      out.write("</td><td>");

                if ("client".equals(tunnelType) || "server".equals(tunnelType)) { 
      out.write("\n                    ");
      out.print(intl._t("Standard"));

                } else if ("httpclient".equals(tunnelType) || "httpserver".equals(tunnelType)) { 
      out.write("\n                    HTTP");

                } else if ("ircclient".equals(tunnelType) || "ircserver".equals(tunnelType)) { 
      out.write("\n                    IRC");

                } else if ("sockstunnel".equals(tunnelType)) { 
      out.write("\n                    SOCKS 4/4a/5");

                } else if ("socksirctunnel".equals(tunnelType)) { 
      out.write("\n                    SOCKS IRC");

                } 
      out.write("\n                </td></tr>\n                <tr><td>");
      out.print(intl._t("Tunnel name"));
      out.write("</td>\n                <td>");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("name")));
      out.write("</td></tr>    \n                <tr><td>");
      out.print(intl._t("Tunnel description"));
      out.write("</td>\n                <td>");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("nofilter_description")));
      out.write("</td></tr>\n                ");

                if (tunnelIsClient) { 
      out.write("\n                <tr><td>");
      out.print(intl._t("Tunnel destination"));
      out.write("</td><td>");

                  if ("httpclient".equals(tunnelType) || "connectclient".equals(tunnelType) || "sockstunnel".equals(tunnelType) || "socksirctunnel".equals(tunnelType)) { 
      out.write("\n                    ");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("proxyList")));

                  } else if ("client".equals(tunnelType) || "ircclient".equals(tunnelType)) { 
      out.write("\n                    ");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("targetDestination")));

                  } 
      out.write("\n                </td></tr>");

                } 
      out.write("\n                ");

                if (!tunnelIsClient) { 
      out.write("\n                    <tr><td>");
      out.print(intl._t("Binding address"));
      out.write("</td><td>\n                    ");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("targetHost")));
      out.write("</td></tr>");

                }
                if (!tunnelIsClient) { 
      out.write("\n                    <tr><td>");
      out.print(intl._t("Tunnel port"));
      out.write("</td><td>");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("targetPort")));
      out.write("</td></tr>");

                }
                if (tunnelIsClient) { 
      out.write("\n                    <tr><td>");
      out.print(intl._t("Port"));
      out.write("</td><td>");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("port")));
      out.write("</td></tr>");

                }
                if (tunnelIsClient) { 
      out.write("\n                    <tr><td>");
      out.print(intl._t("Reachable by"));
      out.write("</td><td>");
      out.print(net.i2p.data.DataHelper.stripHTML(request.getParameter("reachableBy")));
      out.write("</td></tr>");

                } 
      out.write("\n                <tr><td>");
      out.print(intl._t("Tunnel auto-start"));
      out.write("</td><td>");

                if ("1".equals(request.getParameter("startOnLoad"))) { 
      out.write("\n                    Yes");

                } else { 
      out.write("\n                    No");

                } 
      out.write("\n                </td></tr>\n            </table>\n        </td>\n    </tr>\n    <tr>\n        <td class=\"infohelp\">\n            <p>\n                ");
      out.print(intl._t("Alongside these basic settings, there are a number of advanced options for tunnel configuration."));
      out.write("\n                ");
      out.print(intl._t("The wizard will set reasonably sensible default values for these, but you can view and/or edit these by clicking on the tunnel's name in the main I2PTunnel page."));
      out.write("\n            </p>\n\n            <input type=\"hidden\" name=\"tunnelDepth\" value=\"3\" />\n            <input type=\"hidden\" name=\"tunnelVariance\" value=\"0\" />\n            <input type=\"hidden\" name=\"tunnelQuantity\" value=\"2\" />\n            <input type=\"hidden\" name=\"tunnelBackupQuantity\" value=\"0\" />\n            <input type=\"hidden\" name=\"clientHost\" value=\"internal\" />\n            <input type=\"hidden\" name=\"clientport\" value=\"internal\" />\n            <input type=\"hidden\" name=\"reduceCount\" value=\"1\" />\n            <input type=\"hidden\" name=\"reduceTime\" value=\"20\" />");


              if (tunnelIsClient) { /* Client-only defaults */
            
      out.write("<input type=\"hidden\" name=\"newDest\" value=\"0\" />\n            <input type=\"hidden\" name=\"closeTime\" value=\"30\" />");

              } else { /* Server-only defaults */
            
      out.write("<input type=\"hidden\" name=\"privKeyFile\" value=\"");
      out.print(editBean.getPrivateKeyFile(-1));
      out.write("\" />\n        </td>\n    </tr>\n            ");

              } /* tunnelIsClient */
            } /* curPage 7 */

               /* End page 7 */ 
      out.write("\n    <tr>\n        <td class=\"buttons\">\n                    <a class=\"control\" title=\"");
      out.print(intl._t("Cancel the wizard and return to Tunnel Manager home page"));
      out.write("\" href=\"list\">");
      out.print(intl._t("Cancel"));
      out.write("</a>\n                    ");
 if (curPage != 1 && curPage != 7) {
                    
      out.write("<button id=\"controlPrevious\" class=\"control\" type=\"submit\" name=\"action\" value=\"Previous page\" title=\"");
      out.print(intl._t("Return to previous page"));
      out.write('"');
      out.write('>');
      out.print(intl._t("Previous"));
      out.write("</button>");

                    } 
      out.write("\n                    ");
 if (curPage == 7) {
                    
      out.write("<button id=\"controlSave\" class=\"control\" type=\"submit\" name=\"action\" value=\"Save changes\" title=\"");
      out.print(intl._t("Save tunnel configuration"));
      out.write('"');
      out.write('>');
      out.print(intl._t("Save Tunnel"));
      out.write("</button>");

                    } else if (curPage == 6) {
                    
      out.write("<button id=\"controlFinish\" class=\"control\" type=\"submit\" name=\"action\" value=\"Next page\" title=\"");
      out.print(intl._t("Finish Wizard and review tunnel settings"));
      out.write('"');
      out.write('>');
      out.print(intl._t("Finish"));
      out.write("</button>");

                    } else {
                    
      out.write("<button id=\"controlNext\" class=\"control\" type=\"submit\" name=\"action\" value=\"Next page\" title=\"");
      out.print(intl._t("Advance to next page"));
      out.write('"');
      out.write('>');
      out.print(intl._t("Next"));
      out.write("</button>");

                    } 
      out.write("\n        </td>\n    </tr>\n</table>\n        </div>\n\n    </form>\n\n</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
