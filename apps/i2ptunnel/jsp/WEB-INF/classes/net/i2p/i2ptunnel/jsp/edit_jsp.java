/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package net.i2p.i2ptunnel.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import net.i2p.i2ptunnel.web.EditBean;

public final class edit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/editClient.jsi", Long.valueOf(1607264743000L));
    _jspx_dependants.put("/editServer.jsi", Long.valueOf(1607264743000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("net.i2p.i2ptunnel.web.EditBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


    // NOTE: Do the header carefully so there is no whitespace before the <?xml... line

    String cspNonce = Integer.toHexString(net.i2p.util.RandomSource.getInstance().nextInt());

    response.setHeader("X-Frame-Options", "SAMEORIGIN");
    // edit pages need script for the delete button 'are you sure'
    response.setHeader("Content-Security-Policy", "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'nonce-" + cspNonce + "'; form-action 'self'; frame-ancestors 'self'; object-src 'none'; media-src 'none'");
    response.setHeader("X-XSS-Protection", "1; mode=block");
    response.setHeader("X-Content-Type-Options", "nosniff");
    response.setHeader("Referrer-Policy", "no-referrer");
    response.setHeader("Accept-Ranges", "none");


 
boolean __isClient = false;
boolean __invalid = false;
int curTunnel = -1;
String tun = request.getParameter("tunnel");
if (tun != null) {
  try {
    curTunnel = Integer.parseInt(tun);
    __isClient = EditBean.staticIsClient(curTunnel);
  } catch (NumberFormatException nfe) {
    __invalid = true;
  }
} else {
  String type = request.getParameter("type");
  __isClient = EditBean.isClient(type);
}

      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n");
      net.i2p.i2ptunnel.web.EditBean editBean = null;
      editBean = (net.i2p.i2ptunnel.web.EditBean) _jspx_page_context.getAttribute("editBean", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (editBean == null){
        editBean = new net.i2p.i2ptunnel.web.EditBean();
        _jspx_page_context.setAttribute("editBean", editBean, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      net.i2p.i2ptunnel.ui.Messages intl = null;
      intl = (net.i2p.i2ptunnel.ui.Messages) _jspx_page_context.getAttribute("intl", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (intl == null){
        intl = new net.i2p.i2ptunnel.ui.Messages();
        _jspx_page_context.setAttribute("intl", intl, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n    <title>");
      out.print(intl._t("Hidden Services Manager"));
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print((__isClient ? intl._t("Edit Client Tunnel") : intl._t("Edit Hidden Service")));
      out.write("</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <link href=\"/themes/console/images/favicon.ico\" type=\"image/x-icon\" rel=\"shortcut icon\" />\n    <link href=\"");
      out.print(editBean.getTheme());
      out.write("i2ptunnel.css?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" rel=\"stylesheet\" type=\"text/css\" /> \n<style type='text/css'>\n  input.default { width: 1px; height: 1px; visibility: hidden; }\n</style>\n<script src=\"/js/resetScroll.js?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" type=\"text/javascript\"></script>\n<script src=\"js/tableSlider.js?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" type=\"text/javascript\"></script>\n<script nonce=\"");
      out.print(cspNonce);
      out.write("\" type=\"text/javascript\">\n  var deleteMessage = \"");
      out.print(intl._t("Are you sure you want to delete?"));
      out.write("\";\n</script>\n<script src=\"js/delete.js?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" type=\"text/javascript\"></script>\n</head>\n<body id=\"tunnelEditPage\">\n");

if (__invalid) {
    
      out.write("Invalid tunnel parameter");

} else {
    if (editBean.isInitialized()) {

      out.write("<form method=\"post\" action=\"list\">\n    <div class=\"panel\">\n");

        if (__isClient) {
            

                String tunnelTypeName;
                String tunnelType;
                if (curTunnel >= 0) {
                    tunnelTypeName = editBean.getTunnelType(curTunnel);
                    tunnelType = editBean.getInternalType(curTunnel);
                  
      out.write("<h2>");
      out.print(intl._t("Edit proxy settings"));
      out.write(' ');
      out.write('(');
      out.print(editBean.getTunnelName(curTunnel));
      out.write(")</h2>");
 
                } else {
                    tunnelTypeName = editBean.getTypeName(request.getParameter("type"));
                    tunnelType = net.i2p.data.DataHelper.stripHTML(request.getParameter("type"));
                  
      out.write("<h2>");
      out.print(intl._t("New proxy settings"));
      out.write("</h2>");
 
                } 
      out.write("<input type=\"hidden\" name=\"tunnel\" value=\"");
      out.print(curTunnel);
      out.write("\" />\n                <input type=\"hidden\" name=\"nonce\" value=\"");
      out.print(net.i2p.i2ptunnel.web.IndexBean.getNextNonce());
      out.write("\" />\n                <input type=\"hidden\" name=\"type\" value=\"");
      out.print(tunnelType);
      out.write("\" />\n");

                // these are four keys that are generated automatically on first save,
                // and we want to persist in i2ptunnel.config, but don't want to
                // show clogging up the custom options form.
                String key = editBean.getKey1(curTunnel);
                if (key != null && key.length() > 0) { 
      out.write("<input type=\"hidden\" name=\"key1\" value=\"");
      out.print(key);
      out.write("\" />\n");
              }
                key = editBean.getKey2(curTunnel);
                if (key != null && key.length() > 0) { 
      out.write("<input type=\"hidden\" name=\"key2\" value=\"");
      out.print(key);
      out.write("\" />\n");
              }
                key = editBean.getKey3(curTunnel);
                if (key != null && key.length() > 0) { 
      out.write("<input type=\"hidden\" name=\"key3\" value=\"");
      out.print(key);
      out.write("\" />\n");
              }
                key = editBean.getKey4(curTunnel);
                if (key != null && key.length() > 0) { 
      out.write("<input type=\"hidden\" name=\"key4\" value=\"");
      out.print(key);
      out.write("\" />\n");
              }

      out.write("<input type=\"submit\" class=\"default\" name=\"action\" value=\"Save changes\" />\n    <table id=\"clientTunnelEdit\" class=\"tunnelConfig\">\n        <tr>\n            <th class=\"tunnelNameLabel excludeBackgroundImage\">\n                ");
      out.print(intl._t("Name"));
      out.write("</th><th class=\"excludeBackgroundImage\">\n                ");
      out.print(intl._t("Type"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <input type=\"text\" size=\"30\" maxlength=\"50\" name=\"name\" title=\"");
      out.print(intl._t("Name of tunnel to be displayed on Tunnel Manager home page and the router console sidebar"));
      out.write("\" value=\"");
      out.print(editBean.getTunnelName(curTunnel));
      out.write("\" class=\"freetext tunnelName\" />\n            </td><td>\n                ");
      out.print(tunnelTypeName);
      out.write("</td>\n        </tr><tr>\n            <th>\n                ");
      out.print(intl._t("Description"));
      out.write("</th><th class=\"excludeBackgroundImage\">\n                ");
      out.print(intl._t("Auto Start Tunnel"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <input type=\"text\" size=\"60\" maxlength=\"80\" name=\"nofilter_description\" title=\"");
      out.print(intl._t("Description of tunnel to be displayed on Tunnel Manager home page"));
      out.write("\" value=\"");
      out.print(editBean.getTunnelDescription(curTunnel));
      out.write("\" class=\"freetext tunnelDescription\" />\n            </td><td>\n                <label title=\"");
      out.print(intl._t("Enable this option to ensure this service is available when the router starts"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"startOnLoad\"");
      out.print((editBean.startAutomatically(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Automatically start tunnel when router starts"));
      out.write("</label>\n            </td>\n        </tr><tr>\n");

            boolean isShared = editBean.isSharedClient(curTunnel);
            String aStopFirst = intl._t("The client tunnel and all other shared client tunnels must be stopped to change this setting");
            String bStopFirst = intl._t("The client tunnel must be stopped to change this setting");
            String stopFirst = isShared ? aStopFirst : bStopFirst;
            boolean canChangePort = editBean.canChangePort(curTunnel);
            String tastopFirst = " title=\"" + aStopFirst + "\" ";
            String tbstopFirst = " title=\"" + bStopFirst + "\" ";
            String tstopFirst = isShared ? tastopFirst : tbstopFirst;
            // we don't actually disable the fields for a new tunnel, but we provide a warning
            String phdisabled = (canChangePort && isShared) ? "" : tstopFirst;

      out.write("<th colspan=\"2\" ");
      out.print(phdisabled);
      out.write('>');
      out.write('\n');
          if ("streamrclient".equals(tunnelType)) { 
      out.print(intl._t("Target"));
          } else { 
      out.print(intl._t("Access Point"));
          } /* streamrclient */ 
      out.write("</th>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Port"));
      out.write(":</b>\n");

                       String value = editBean.getClientPort(curTunnel);
                       if (value == null || "".equals(value.trim())) {
                           out.write(" <span class=\"required\"><font color=\"red\">(");
                           out.write(intl._t("required"));
                           out.write(")</font></span>");
                       }
                      String phelp = intl._t("Specify the local port this service should be accessible from");
                      String ptext = canChangePort ? phelp : bStopFirst;
                      String pdisabled = canChangePort ? "" : " readonly=\"readonly\" ";

      out.write("<input type=\"text\" size=\"6\" maxlength=\"5\" name=\"port\" title=\"");
      out.print(ptext);
      out.write("\" value=\"");
      out.print(editBean.getClientPort(curTunnel));
      out.write("\" class=\"freetext port\" placeholder=\"required\" ");
      out.print(pdisabled);
      out.write("/>\n            </td>\n");

            if ("streamrclient".equals(tunnelType)) {

      out.write("<td>\n                <b>");
      out.print(intl._t("Host"));
      out.write(":</b>\n");

                       String targetHost = editBean.getTargetHost(curTunnel);
                       if (targetHost == null || "".equals(targetHost.trim())) {
                           out.write(" <span class=\"required\"><font color=\"red\">(");
                           out.write(intl._t("required"));
                           out.write(")</font></span>");
                       }

      out.write("<input type=\"text\" size=\"20\" id=\"targetHost\" name=\"targetHost\" title=\"");
      out.print(intl._t("Hostname or IP address of the target server"));
      out.write("\" value=\"");
      out.print(targetHost);
      out.write("\" class=\"freetext host\" placeholder=\"required\" />\n            </td>\n");

            } else {
                      String ihelp = intl._t("Local interface (ip address) the client tunnel will be reachable from");
                      String itext = canChangePort ? ihelp : bStopFirst;

      out.write("<td>\n                <b>");
      out.print(intl._t("Reachable by"));
      out.write(":</b>\n                <select id=\"reachableBy\" name=\"reachableBy\" title=\"");
      out.print(itext);
      out.write("\" class=\"selectbox\" ");
      out.print(pdisabled);
      out.write('>');
      out.write('\n');

                    String clientInterface = editBean.getClientInterface(curTunnel);
                    for (String ifc : editBean.interfaceSet()) {
                        out.write("<option value=\"");
                        out.write(ifc);
                        out.write('\"');
                        if (ifc.equals(clientInterface))
                            out.write(" selected=\"selected\"");
                        else if (!canChangePort)
                            out.write(" disabled=\"disabled\"");
                        out.write('>');
                        out.write(ifc);
                        out.write("</option>\n");
                    }

      out.write("</select>\n            </td>\n         ");
 } /* streamrclient */ 
      out.write("</tr>\n");

            if ("client".equals(tunnelType) || "ircclient".equals(tunnelType)) {

      out.write("<tr>\n            <th colspan=\"2\">\n                    ");
      out.print(intl._t("Use SSL?"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <label title=\"");
      out.print(intl._t("If you are accessing a service on a remote I2P router, you may wish to connect with SSL to avoid traffic interception. The client application should be also be configured to use SSL."));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"useSSL\" ");
      out.print((editBean.isSSLEnabled(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Clients use SSL to connect to tunnel"));
      out.write("</label>\n            </td>\n        </tr>\n");

            } /* tunnel types */

            if ("httpclient".equals(tunnelType) || "connectclient".equals(tunnelType) || "sockstunnel".equals(tunnelType) || "socksirctunnel".equals(tunnelType)) {

      out.write("<tr>\n            <th colspan=\"2\">\n                    ");
      out.print(intl._t("Outproxies"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <input type=\"text\" size=\"30\" name=\"proxyList\" title=\"");
      out.print(intl._t("Specify the .i2p address or destination (b32 or b64) of the outproxy here."));
      out.write("&nbsp;");
      out.print(intl._t("For a random selection from a pool, separate with commas e.g. server1.i2p,server2.i2p"));
      out.write("\" value=\"");
      out.print(editBean.getClientDestination(curTunnel));
      out.write("\" class=\"freetext proxyList\" />\n            </td>\n        </tr>\n");

                 if ("httpclient".equals(tunnelType)) {

      out.write("<tr>\n            <th colspan=\"2\">\n                       ");
      out.print(intl._t("SSL Outproxies"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                   <input type=\"text\" size=\"30\" name=\"sslProxies\" title=\"");
      out.print(intl._t("Specify the .i2p address or destination (b32 or b64) of the outproxy here."));
      out.write("&nbsp;");
      out.print(intl._t("For a random selection from a pool, separate with commas e.g. server1.i2p,server2.i2p"));
      out.write("\" value=\"");
      out.print(editBean.getSslProxies(curTunnel));
      out.write("\" class=\"freetext proxyList\" />\n            </td>\n        </tr>\n");

                 }  // httpclient

      out.write("<tr>\n            <th colspan=\"2\">\n                    ");
      out.print(intl._t("Use Outproxy Plugin"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <label title=\"");
      out.print(intl._t("If an outproxy plugin is installed (e.g. Orchid), use this instead of any configured outproxies to access websites outside of I2P"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"useOutproxyPlugin\" ");
      out.print((editBean.getUseOutproxyPlugin(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n");
      out.print(intl._t("Use plugin instead of above-listed proxies if available"));
      out.write("</label>\n            </td>\n        </tr>\n");

               } else if ("client".equals(tunnelType) || "ircclient".equals(tunnelType) || "streamrclient".equals(tunnelType)) {

      out.write("<tr>\n            <th colspan=\"2\">\n                    ");
      out.print(intl._t("Tunnel Destination"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                    ");
 String value2 = editBean.getClientDestination(curTunnel);
                       if (value2 == null || "".equals(value2.trim())) {
                           out.write(" <span class=\"required\"><font color=\"red\">(");
                           out.write(intl._t("required"));
                           out.write(")</font></span>");
                       }

      out.write("<input type=\"text\" size=\"30\" id=\"targetDestination\" name=\"targetDestination\" title=\"");
      out.print(intl._t("Specify the .i2p address or destination (b32 or b64) of the tunnel here."));
      out.write("&nbsp;");
      out.print(intl._t("For a random selection from a pool, separate with commas e.g. server1.i2p,server2.i2p"));
      out.write("\" value=\"");
      out.print(editBean.getClientDestination(curTunnel));
      out.write("\" class=\"freetext destination\" placeholder=\"required\" />\n                ");
      out.print(intl._t("name, name:port, or destination"));

                        if ("streamrclient".equals(tunnelType)) {
                            /* deferred resolution unimplemented in streamr client */

      out.write("\n                         - ");
      out.print(intl._t("b32 not recommended"));

                        }

      out.write("</td>\n        </tr>\n");

            }

            if (!"streamrclient".equals(tunnelType)) {

      out.write("<tr>\n            <th colspan=\"2\" ");
      out.print(phdisabled);
      out.write(">\n                ");
      out.print(intl._t("Shared Client"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n");

                // we don't actually disable the field for a new tunnel, but we provide a warning
                String shtitle = (canChangePort && isShared) ?
                                 intl._t("Traffic from all clients with this feature enabled will be routed over the same set of tunnels. This will make profiling the tunnels by an adversary more difficult, but will link the clients together.") :
                                 (isShared ? bStopFirst : aStopFirst);               
                String shdisabled = canChangePort ? "" : " disabled=\"disabled\" ";

      out.write("<label title=\"");
      out.print(shtitle);
      out.write("\">\n                <input value=\"true\" type=\"checkbox\" name=\"shared\" ");
      out.print((isShared ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" ");
      out.print(shdisabled);
      out.write("/>\n                ");
      out.print(intl._t("Share tunnels with other clients?"));
      out.write("</label>\n");

                if (isShared && !canChangePort) {
                    // disabled checkbox won't come back in the form, stuff it in here
                    // https://stackoverflow.com/questions/155291/can-html-checkboxes-be-set-to-readonly
                    
      out.write("<input value=\"true\" type=\"hidden\" name=\"shared\"/>");

                }

      out.write("</td>\n        </tr>\n");

            } // !streamrclient

            if ("ircclient".equals(tunnelType)) {

      out.write("<tr>\n            <th colspan=\"2\">\n                    ");
      out.print(intl._t("Enable DCC"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <label title=\"");
      out.print(intl._t("Enables direct chat and file transfers, bypassing I2P"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"DCC\"");
      out.print((editBean.getDCC(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Enable Direct Client-to-Client protocol. Note that this will compromise your anonymity and is <i>not</i> recommended."));
      out.write("</label>\n            </td>\n        </tr>\n");

            } // ircclient

      out.write("</table>\n    <h3>");
      out.print(intl._t("Advanced networking options"));
      out.write("</h3>\n");

            if (!"streamrclient".equals(tunnelType) && (canChangePort || isShared)) {
               // no shared client tunnels for streamr
               // If running and not shared, this doesn't apply.

      out.write("<table class=\"tunnelConfig\">\n        <tr>\n            <td class=\"infohelp\" colspan=\"2\">\n                ");
      out.print(intl._t("Note: When this client proxy is configured to share tunnels, then these options are for all the shared proxy clients!"));
      out.write("</td>\n        </tr>\n    </table>\n");

            } // !streamrclient

      out.write("<table class=\"tunnelConfig\" id=\"lengthOption\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Length Options"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Length"));
      out.write("</b>\n            </td><td>\n                <b>");
      out.print(intl._t("Variance"));
      out.write("</b>\n            </td>\n        </tr><tr>\n            <td>\n                <select id=\"tunnelDepth\" name=\"tunnelDepth\" title=\"");
      out.print(intl._t("Length of each Tunnel"));
      out.write("\" class=\"selectbox\">\n");

                       int tunnelDepth = editBean.getTunnelDepth(curTunnel, 3);
                  
      out.write("<option value=\"0\"");
      out.print((tunnelDepth == 0 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 0));
      out.print(editBean.unlessAdvanced("no anonymity"));
      out.write("</option>\n                    <option value=\"1\"");
      out.print((tunnelDepth == 1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 1));
      out.print(editBean.unlessAdvanced("low anonymity"));
      out.write("</option>\n                    <option value=\"2\"");
      out.print((tunnelDepth == 2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 2));
      out.print(editBean.unlessAdvanced("medium anonymity"));
      out.write("</option>\n                    <option value=\"3\"");
      out.print((tunnelDepth == 3 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 3));
      out.print(editBean.unlessAdvanced("high anonymity"));
      out.write("</option>\n");
                 if (editBean.isAdvanced()) {
                  
      out.write("<option value=\"4\"");
      out.print((tunnelDepth == 4 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 4));
      out.write("</option>\n                    <option value=\"5\"");
      out.print((tunnelDepth == 5 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 5));
      out.write("</option>\n                    <option value=\"6\"");
      out.print((tunnelDepth == 6 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 6));
      out.write("</option>\n                    <option value=\"7\"");
      out.print((tunnelDepth == 7 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 7));
      out.write("</option>\n");
                 } else if (tunnelDepth > 3) { 
                
      out.write("<option value=\"");
      out.print(tunnelDepth);
      out.write("\" selected=\"selected\">");
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", tunnelDepth));
      out.write("</option>\n");

                   }
              
      out.write("</select>\n            </td><td>\n                <select id=\"tunnelVariance\" name=\"tunnelVariance\" title=\"");
      out.print(intl._t("Level of Randomization for Tunnel Length"));
      out.write("\" class=\"selectbox\">\n                    ");
 int tunnelVariance = editBean.getTunnelVariance(curTunnel, 0);
                  
      out.write("<option value=\"0\"");
      out.print((tunnelVariance  ==  0 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("0 hop variance"));
      out.print(editBean.unlessAdvanced("no randomization, consistent performance"));
      out.write("</option>\n                    <option value=\"1\"");
      out.print((tunnelVariance  ==  1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+ 0-1 hop variance"));
      out.print(editBean.unlessAdvanced("medium randomization, lower performance"));
      out.write("</option>\n                    <option value=\"2\"");
      out.print((tunnelVariance  ==  2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+ 0-2 hop variance"));
      out.print(editBean.unlessAdvanced("high randomization, very low performance"));
      out.write("</option>\n                    <option value=\"-1\"");
      out.print((tunnelVariance == -1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+/- 0-1 hop variance"));
      out.print(editBean.unlessAdvanced("standard randomization, standard performance"));
      out.write("</option>\n                    <option value=\"-2\"");
      out.print((tunnelVariance == -2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+/- 0-2 hop variance"));
      out.print(editBean.unlessAdvanced("not recommended"));
      out.write("</option>\n                ");
 if (tunnelVariance > 2 || tunnelVariance < -2) {
                
      out.write("<option value=\"");
      out.print(tunnelVariance);
      out.write("\" selected=\"selected\">");
      out.print( (tunnelVariance > 2 ? "+ " : "+/- ") );
      out.write('0');
      out.write('-');
      out.print(tunnelVariance);
      out.print(intl._t("hop variance"));
      out.write("</option>\n                ");
 }
              
      out.write("</select>\n            </td>\n        </tr>\n    </table>\n    <table class=\"tunnelConfig\" id=\"quantityOptions\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Quantity Options"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Count"));
      out.write("</b>\n            </td><td>\n                <b>");
      out.print(intl._t("Backup Count"));
      out.write("</b>\n            </td>\n        </tr><tr>\n            <td>\n                <select id=\"tunnelQuantity\" name=\"tunnelQuantity\" title=\"");
      out.print(intl._t("Number of Tunnels in Group"));
      out.write("\" class=\"selectbox\">\n                    ");
      out.print(editBean.getQuantityOptions(curTunnel, 0));
      out.write("</select>\n            </td><td>\n                <select id=\"tunnelBackupQuantity\" name=\"tunnelBackupQuantity\" title=\"");
      out.print(intl._t("Number of Reserve Tunnels"));
      out.write("\" class=\"selectbox\">\n");

                       int tunnelBackupQuantity = editBean.getTunnelBackupQuantity(curTunnel, 0);
                  
      out.write("<option value=\"0\"");
      out.print((tunnelBackupQuantity == 0 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 0));
      out.print(editBean.unlessAdvanced("no redundancy, no added resource usage"));
      out.write("</option>\n                    <option value=\"1\"");
      out.print((tunnelBackupQuantity == 1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 1));
      out.print(editBean.unlessAdvanced("low redundancy, low resource usage"));
      out.write("</option>\n                    <option value=\"2\"");
      out.print((tunnelBackupQuantity == 2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 2));
      out.print(editBean.unlessAdvanced("medium redundancy, medium resource usage"));
      out.write("</option>\n                    <option value=\"3\"");
      out.print((tunnelBackupQuantity == 3 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 3));
      out.print(editBean.unlessAdvanced("high redundancy, high resource usage"));
      out.write("</option>\n");

                   if (tunnelBackupQuantity > 3) {
                
      out.write("<option value=\"");
      out.print(tunnelBackupQuantity);
      out.write("\" selected=\"selected\">");
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", tunnelBackupQuantity));
      out.write("</option> \n");

                   }
              
      out.write("</select>\n            </td>\n        </tr>\n    </table>\n    <table class=\"tunnelConfig\" id=\"timedOptions\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Management Options"));
      out.write("</th>\n        </tr>\n");

            if ("client".equals(tunnelType)) {

      out.write("<tr>\n            <th>\n                ");
      out.print(intl._t("Profile"));
      out.write("</th><th>\n                ");
      out.print(intl._t("Delay Connect"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <select id=\"connectionProfile\" name=\"profile\" title=\"");
      out.print(intl._t("Connection Profile"));
      out.write("\" class=\"selectbox\">\n                    ");
 boolean interactiveProfile = editBean.isInteractive(curTunnel);
                  
      out.write("<option ");
      out.print((interactiveProfile == true  ? "selected=\"selected\" " : ""));
      out.write("value=\"interactive\">");
      out.print(intl._t("interactive connection"));
      out.write("</option>\n                    <option ");
      out.print((interactiveProfile == false ? "selected=\"selected\" " : ""));
      out.write("value=\"bulk\">");
      out.print(intl._t("bulk connection (downloads/websites/BT)"));
      out.write("</option>\n                </select>\n            </td><td>\n                <label title=\"");
      out.print(intl._t("Delay Connection"));
      out.write("\"><input value=\"1000\" type=\"checkbox\" name=\"connectDelay\"");
      out.print((editBean.shouldDelay(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                (");
      out.print(intl._t("for request/response connections"));
      out.write(")</label> ");
 // TODO: Convey to users: Where is the (1s) delay introduced? What is the difference between delay connect and delay open? 
      out.write("</td>\n        </tr>\n");

            } // client


            if (!"streamrclient".equals(tunnelType)) {
                // streamr client sends pings so it will never be idle

      out.write("<tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Delay tunnel open until required"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <label title=\"");
      out.print(intl._t("Conserve resources by only creating tunnels when required"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"delayOpen\"");
      out.print((editBean.getDelayOpen(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Delay opening client tunnel until activity is detected on the configured tunnel port"));
      out.write("</label>\n            </td>\n        </tr>\n");

            } // !streamrclient

      out.write("<tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Reduce tunnel quantity when idle"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <label title=\"");
      out.print(intl._t("Reduce tunnel count when idle but keep tunnel open (to ensure immediate availability)"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"reduce\"");
      out.print((editBean.getReduce(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Reduce tunnel quantity when idle to conserve resources"));
      out.write("</label>\n            </td>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Reduced tunnel count"));
      out.write(":</b>\n                <input type=\"text\" id=\"reducedTunnelCount\" name=\"reduceCount\" size=\"1\" maxlength=\"1\" title=\"");
      out.print(intl._t("Reduced tunnel count"));
      out.write("\" value=\"");
      out.print(editBean.getReduceCount(curTunnel));
      out.write("\" class=\"freetext quantity\" />\n            </td><td>\n                <b>");
      out.print(intl._t("Idle period"));
      out.write(":</b>\n                <input type=\"text\" name=\"reduceTime\" size=\"4\" maxlength=\"4\" title=\"");
      out.print(intl._t("Reduced Tunnel Idle Time"));
      out.write("\" value=\"");
      out.print(editBean.getReduceTime(curTunnel));
      out.write("\" class=\"freetext period\" />\n                minutes\n            </td>\n        </tr><tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Close tunnels when idle"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <label title=\"");
      out.print(intl._t("To conserve resources, close tunnels when not in use"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"close\"");
      out.print((editBean.getClose(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Close client tunnels after specified idle period"));
      out.write("</label>\n            </td><td>\n                <b>");
      out.print(intl._t("Idle period"));
      out.write(":</b>\n                <input type=\"text\" name=\"closeTime\" size=\"4\" maxlength=\"4\" title=\"");
      out.print(intl._t("Close Tunnel Idle Time"));
      out.write("\" value=\"");
      out.print(editBean.getCloseTime(curTunnel));
      out.write("\" class=\"freetext period\" />\n                minutes\n            </td>\n        </tr><tr>\n");

            boolean canChangeEncType = editBean.canChangeEncType(curTunnel);
            boolean isPersistent = editBean.getPersistentClientKey(curTunnel);
            boolean canChangeRadio = canChangeEncType || !isPersistent;
            String nhdisabled = canChangeRadio ? "" : tstopFirst;
            String ndisabled = canChangeRadio ? "" : " disabled=\"disabled\" ";
            String n1help = intl._t("Change tunnel identity (destination) when tunnels reopen");
            String n1text = canChangeRadio ? n1help : stopFirst;
            String n2help = intl._t("Retain tunnel identity (destination) when tunnels reopen");
            String n2text = canChangeRadio ? n2help : stopFirst;

      out.write("<td colspan=\"2\" ");
      out.print(nhdisabled);
      out.write(">\n                <b>");
      out.print(intl._t("New Keys on Reopen"));
      out.write(":</b>\n                <span class=\"multiOption\">\n                    <label title=\"");
      out.print(n1text);
      out.write("\"><input value=\"1\" type=\"radio\" name=\"newDest\"\n                        ");
      out.print((editBean.getNewDest(curTunnel) ? " checked=\"checked\"" : ndisabled));
      out.write(" class=\"tickbox\" />\n                    ");
      out.print(intl._t("Enable"));
      out.write("</label>\n                </span>\n                <span class=\"multiOption\">\n                    <label title=\"");
      out.print(n2text);
      out.write("\"><input value=\"0\" type=\"radio\" name=\"newDest\"\n                        ");
      out.print((editBean.getNewDest(curTunnel) || isPersistent ? ndisabled : " checked=\"checked\""));
      out.write(" class=\"tickbox\" />\n                    ");
      out.print(intl._t("Disable"));
      out.write("</label>\n                </span>\n            </td>\n        </tr>\n");

            String ehdisabled = canChangeEncType ? "" : tstopFirst;
            String edisabled = canChangeEncType ? "" : " disabled=\"disabled\" ";
            String destb64 = editBean.getDestinationBase64(curTunnel);

            if ("client".equals(tunnelType) || "ircclient".equals(tunnelType) || "socksirctunnel".equals(tunnelType) || "sockstunnel".equals(tunnelType)) {

      out.write("<tr>\n            <th colspan=\"2\" ");
      out.print(ehdisabled);
      out.write(">\n                ");
      out.print(intl._t("Persistent private key"));
      out.write("</th>\n        </tr><tr>\n");

                      String p1help = intl._t("Enabling this feature will ensure your tunnel identity (destination) remains static, for services offering features based on destination e.g. IRC user authentication");
                      String p1text = canChangeEncType ? p1help : stopFirst;
                      String p2help = intl._t("Path to Private Key File");
                      String p2text = canChangeEncType ? p2help : stopFirst;
                      String p2disabled = canChangeEncType ? "" : " readonly=\"readonly\" ";

      out.write("<td>\n                <label title=\"");
      out.print(p1text);
      out.write("\"><input value=\"2\" type=\"radio\" name=\"newDest\"\n                     ");
      out.print((editBean.getPersistentClientKey(curTunnel) ? " checked=\"checked\"" : edisabled));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Generate key to enable persistent client tunnel identity"));
      out.write("</label>\n            </td><td>\n                <b>");
      out.print(intl._t("File"));
      out.write(":</b>\n                <input type=\"text\" size=\"30\" id=\"privKeyFile\" name=\"privKeyFile\" title=\"");
      out.print(p2text);
      out.write("\" value=\"");
      out.print(editBean.getPrivateKeyFile(curTunnel));
      out.write("\" class=\"freetext\" ");
      out.print(p2disabled);
      out.write("/>\n            </td>\n        </tr>\n");

            if (destb64.length() > 0) {

      out.write("<tr>\n            <td colspan=\"2\">\n                <b>");
      out.print(intl._t("Local destination"));
      out.write("</b>\n            </td>\n        </tr><tr>\n            <td colspan=\"2\">\n                <div class=\"displayText resetScrollLeft\" title=\"");
      out.print(intl._t("Read Only: Local Destination (if known)"));
      out.write("\" tabindex=\"0\">");
      out.print(destb64);
      out.write("</div>\n            </td>\n        </tr><tr>\n            <td colspan=\"2\">\n                <b>");
      out.print(intl._t("Local Base32"));
      out.write(":</b>&nbsp;\n                ");
      out.print(editBean.getDestHashBase32(curTunnel));
      out.write("</td>\n        </tr>\n");

              } // if destb64
            }

            if ("httpclient".equals(tunnelType)) {

      out.write("</table>\n    <table class=\"tunnelConfig\" id=\"filterOptions\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Filtering Options"));
      out.write("</th>\n        </tr><tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("HTTP Filtering"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <label title=\"");
      out.print(intl._t("When enabled, the user agent of your web browser or http client will not be spoofed, potentially reducing your anonymity"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"allowUserAgent\"");
      out.print((editBean.getAllowUserAgent(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Do not spoof User-Agent header"));
      out.write("</label>\n            </td><td>\n                <label title=\"");
      out.print(intl._t("When enabled, the referer (originating page) of your web requests will not be filtered, potentially reducing your anonymity"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"allowReferer\"");
      out.print((editBean.getAllowReferer(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Do not block Referer header"));
      out.write("</label>\n            </td>\n        </tr><tr>\n            <td>\n                <label title=\"");
      out.print(intl._t("When enabled, the accept headers (mime types support) broadcast by your web browser will not be filtered, potentially reducing your anonymity"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"allowAccept\"");
      out.print((editBean.getAllowAccept(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n");
      out.print(intl._t("Do not block Accept headers"));
      out.write("</label>\n            </td><td>\n                <label title=\"");
      out.print(intl._t("Allow SSL to I2P addresses when enabled"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"allowInternalSSL\"");
      out.print((editBean.getAllowInternalSSL(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Allow SSL to I2P addresses"));
      out.write("</label>\n            </td>\n        </tr>\n");

            } // if httpclient

            int currentSigType = editBean.getSigType(curTunnel, tunnelType);
            boolean isCreated = isPersistent && destb64.length() > 0;
            boolean canChangeSigType = editBean.canChangeSigType(curTunnel) && !isCreated;
            String tooLate = "title=\"" + intl._t("Configuration cannot be changed after destination is created") + '"';
            String shdisabled = canChangeSigType ? "" : (isCreated ? tooLate : tstopFirst);
            String disabled = canChangeSigType ? "" : " disabled=\"disabled\" ";

      out.write("</table>\n    <table class=\"tunnelConfig\" id=\"cryptoOptions\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Cryptography Options"));
      out.write("</th>\n        </tr><tr>\n            <th colspan=\"2\" ");
      out.print(shdisabled);
      out.write(">\n                ");
      out.print(intl._t("Signature type"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <select id=\"sigType\" name=\"sigType\" class=\"selectbox\" ");
      out.print(shdisabled);
      out.write(">\n                    <option title=\"");
      out.print(intl._t("Legacy option (deprecated), provided for backward compatibility"));
      out.write("\" value=\"0\" ");
      out.print((currentSigType==0 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    DSA-SHA1</option>\n");

              if (editBean.isSigTypeAvailable(1)) {

      out.write("<option value=\"1\" ");
      out.print((currentSigType==1 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    ECDSA-P256</option>\n");

              }
              if (editBean.isSigTypeAvailable(2)) {

      out.write("<option value=\"2\" ");
      out.print((currentSigType==2 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    ECDSA-P384</option>\n");

              }
              if (editBean.isSigTypeAvailable(3)) {

      out.write("<option value=\"3\" ");
      out.print((currentSigType==3 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    ECDSA-P521</option>\n");

              }
              if (editBean.isSigTypeAvailable(7)) {

      out.write("<option title=\"");
      out.print(intl._t("This is the default, recommended option"));
      out.write("\" value=\"7\" ");
      out.print((currentSigType==7 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    Ed25519-SHA-512</option>\n");

              }   // isAvailable

      out.write("</select>\n            </td>\n        </tr>\n");

                boolean has0 = editBean.hasEncType(curTunnel, 0);
                boolean has4 = editBean.hasEncType(curTunnel, 4);

      out.write("<tr>\n            <th colspan=\"2\" ");
      out.print(ehdisabled);
      out.write(">\n                ");
      out.print(intl._t("Encryption types"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <span class=\"multiOption\" ");
      out.print(ehdisabled);
      out.write(">\n                    <label><input value=\"0\" type=\"radio\" id=\"startOnLoad\" name=\"encType\" ");
      out.print((has0 ? " checked=\"checked\"" : edisabled));
      out.write(" class=\"tickbox\" />\n                    ElGamal-2048</label>\n                </span>\n                <span class=\"multiOption\" ");
      out.print(ehdisabled);
      out.write(">\n                    <label><input value=\"4\" type=\"radio\" id=\"startOnLoad\" name=\"encType\" ");
      out.print((has4 ? " checked=\"checked\"" : edisabled));
      out.write(" class=\"tickbox\" />\n                    ECIES-X25519 (");
      out.print(intl._t("Experts only!"));
      out.write(")</label>\n                </span>\n                <span class=\"multiOption\" ");
      out.print(ehdisabled);
      out.write(">\n                    <label><input value=\"4,0\" type=\"radio\" id=\"startOnLoad\" name=\"encType\" ");
      out.print(((has0 && has4) ? " checked=\"checked\"" : edisabled));
      out.write(" class=\"tickbox\" />\n                    ");
      out.print(intl._t("Both encryption types"));
      out.write("</label>\n                </span>\n            </td>\n        </tr>\n");

            if ("httpclient".equals(tunnelType) || "connectclient".equals(tunnelType) || "sockstunnel".equals(tunnelType) || "socksirctunnel".equals(tunnelType)) {

      out.write("</table>\n    <table class=\"tunnelConfig\" id=\"authOptions\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Authentication Options"));
      out.write("</th>\n        </tr><tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Local Authorization"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <label title=\"");
      out.print(intl._t("Enable to require a username and password to access this local service (for example if hosting on a LAN)"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"proxyAuth\"");
      out.print((editBean.getProxyAuth(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Require local authorization for this service"));
      out.write("</label>\n            </td>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Username"));
      out.write(":</b>\n                <input type=\"text\" name=\"proxyUsername\" title=\"");
      out.print(intl._t("Set username required to access this service"));
      out.write("\" value=\"\" class=\"freetext username\" />\n            </td>\n            <td>\n                <b>");
      out.print(intl._t("Password"));
      out.write(":</b>\n                <input type=\"password\" name=\"nofilter_proxyPassword\" title=\"");
      out.print(intl._t("Set password required to access this service"));
      out.write("\" value=\"\" class=\"freetext password\" />\n            </td>\n        </tr><tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Outproxy Authorization"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <label title=\"");
      out.print(intl._t("Enable if the outproxy a username and password to access"));
      out.write("\"><input value=\"1\" type=\"checkbox\" id=\"startOnLoad\" name=\"outproxyAuth\"");
      out.print((editBean.getOutproxyAuth(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Outproxy requires authorization"));
      out.write("</label>\n            </td>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Username"));
      out.write(":</b>\n                <input type=\"text\" name=\"outproxyUsername\" title=\"");
      out.print(intl._t("Enter username required by outproxy"));
      out.write("\" value=\"");
      out.print(editBean.getOutproxyUsername(curTunnel));
      out.write("\" class=\"freetext username\" />\n            </td>\n\n            <td>\n                <b>");
      out.print(intl._t("Password"));
      out.write(":</b>\n                <input type=\"password\" name=\"nofilter_outproxyPassword\" title=\"");
      out.print(intl._t("Enter password required by outproxy"));
      out.write("\" value=\"");
      out.print(editBean.getOutproxyPassword(curTunnel));
      out.write("\" class=\"freetext password\" />\n            </td>\n        </tr>\n");

            } // httpclient || connect || socks || socksirc

            if ("httpclient".equals(tunnelType)) {

      out.write("</table>\n    <table class=\"tunnelConfig\" id=\"jumpOptions\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Address Lookup Options"));
      out.write("</th>\n        </tr><tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Jump URL List"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <textarea rows=\"2\" style=\"height: 8em;\" cols=\"60\" id=\"hostField\" name=\"jumpList\" title=\"");
      out.print(intl._t("List of helper URLs providing jump links when a host is not found in your addressbook"));
      out.write("\" wrap=\"off\" spellcheck=\"false\">");
      out.print(editBean.getJumpList(curTunnel));
      out.write("</textarea>\n            </td>\n        </tr>\n");

            } // httpclient

      out.write("</table>\n");

            if (!editBean.isRouterContext()) {

      out.write("<table class=\"tunnelConfig\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Router I2CP Address"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Host"));
      out.write(":</b>\n                <input type=\"text\" name=\"clientHost\" size=\"20\" title=\"");
      out.print(intl._t("I2CP Hostname or IP"));
      out.write("\" value=\"");
      out.print(editBean.getI2CPHost(curTunnel));
      out.write("\" class=\"freetext host\" />\n            </td><td>\n                <b>");
      out.print(intl._t("Port"));
      out.write(":</b>\n                <input type=\"text\" name=\"clientport\" size=\"20\" title=\"");
      out.print(intl._t("I2CP Port Number"));
      out.write("\" value=\"");
      out.print(editBean.getI2CPPort(curTunnel));
      out.write("\" class=\"freetext port\" />\n            </td>\n        </tr>\n    </table>\n");

            } // !isRouterContext

      out.write("<table class=\"tunnelConfig\" id=\"advancedOptions\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Custom options"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <input type=\"text\" id=\"customOptions\" name=\"nofilter_customOptions\" size=\"60\" title=\"");
      out.print(intl._t("Advanced tunnel, streaming, and I2CP options"));
      out.write("\" value=\"");
      out.print(editBean.getCustomOptions(curTunnel));
      out.write("\" class=\"freetext\" spellcheck=\"false\"/>\n            </td>\n        </tr><tr>\n            <td class=\"buttons\" colspan=\"2\">\n                    <input type=\"hidden\" value=\"true\" name=\"removeConfirm\" />\n                    <button id=\"controlCancel\" class=\"control\" type=\"submit\" name=\"action\" value=\"\">");
      out.print(intl._t("Cancel"));
      out.write("</button>\n                    <button id=\"controlDelete\" class=\"control delete\" type=\"submit\" name=\"action\" value=\"Delete this proxy\" title=\"");
      out.print(intl._t("Delete this Proxy (cannot be undone)"));
      out.write('"');
      out.write('>');
      out.print(intl._t("Delete"));
      out.write("</button>\n                    <button id=\"controlSave\" class=\"control\" type=\"submit\" name=\"action\" value=\"Save changes\">");
      out.print(intl._t("Save"));
      out.write("</button>\n            </td>\n        </tr>\n</table>\n");

        } else {
            

                String tunnelTypeName;
                String tunnelType;
                if (curTunnel >= 0) {
                    tunnelTypeName = editBean.getTunnelType(curTunnel);
                    tunnelType = editBean.getInternalType(curTunnel);
                  
      out.write("<h2>");
      out.print(intl._t("Edit Server Settings"));
      out.write(' ');
      out.write('(');
      out.print(editBean.getTunnelName(curTunnel));
      out.write(")</h2>");
 
                } else {
                    tunnelTypeName = editBean.getTypeName(request.getParameter("type"));
                    tunnelType = net.i2p.data.DataHelper.stripHTML(request.getParameter("type"));
                  
      out.write("<h2>");
      out.print(intl._t("New Server Settings"));
      out.write("</h2>");
 
                } 
      out.write("<input type=\"hidden\" name=\"tunnel\" value=\"");
      out.print(curTunnel);
      out.write("\" />\n                <input type=\"hidden\" name=\"nonce\" value=\"");
      out.print(net.i2p.i2ptunnel.web.IndexBean.getNextNonce());
      out.write("\" />\n                <input type=\"hidden\" name=\"type\" value=\"");
      out.print(tunnelType);
      out.write("\" />\n");

                // these are four keys that are generated automatically on first save,
                // and we want to persist in i2ptunnel.config, but don't want to
                // show clogging up the custom options form.
                String key = editBean.getKey1(curTunnel);
                if (key != null && key.length() > 0) { 
      out.write("<input type=\"hidden\" name=\"key1\" value=\"");
      out.print(key);
      out.write("\" />\n");
              }
                key = editBean.getKey2(curTunnel);
                if (key != null && key.length() > 0) { 
      out.write("<input type=\"hidden\" name=\"key2\" value=\"");
      out.print(key);
      out.write("\" />\n");
              }
                key = editBean.getKey3(curTunnel);
                if (key != null && key.length() > 0) { 
      out.write("<input type=\"hidden\" name=\"key3\" value=\"");
      out.print(key);
      out.write("\" />\n");
              }
                key = editBean.getKey4(curTunnel);
                if (key != null && key.length() > 0) { 
      out.write("<input type=\"hidden\" name=\"key4\" value=\"");
      out.print(key);
      out.write("\" />\n");
              } 
      out.write("<input type=\"submit\" class=\"default\" name=\"action\" value=\"Save changes\" />\n    <table id=\"serverTunnelEdit\" class=\"tunnelConfig\">\n        <tr>\n            <th class=\"tunnelNameLabel excludeBackgroundImage\">\n                ");
      out.print(intl._t("Name"));
      out.write("</th><th class=\"excludeBackgroundImage\">\n                ");
      out.print(intl._t("Type"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <input type=\"text\" size=\"30\" maxlength=\"50\" name=\"name\" title=\"");
      out.print(intl._t("Name of tunnel to be displayed on Tunnel Manager home page and the router console sidebar"));
      out.write("\" value=\"");
      out.print(editBean.getTunnelName(curTunnel));
      out.write("\" class=\"freetext tunnelName\" />\n            </td><td>\n                ");
      out.print(tunnelTypeName);
      out.write("</td>\n        </tr><tr>\n            <th>\n                ");
      out.print(intl._t("Description"));
      out.write("</th><th class=\"excludeBackgroundImage\">\n                ");
      out.print(intl._t("Auto Start Tunnel"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <input type=\"text\" size=\"60\" maxlength=\"80\" name=\"nofilter_description\" title=\"");
      out.print(intl._t("Description of tunnel to be displayed on Tunnel Manager home page"));
      out.write("\" value=\"");
      out.print(editBean.getTunnelDescription(curTunnel));
      out.write("\" class=\"freetext tunnelDescriptionText\" />\n            </td><td>\n                <label title=\"");
      out.print(intl._t("Enable this option to ensure this service is available when the router starts"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"startOnLoad\"");
      out.print((editBean.startAutomatically(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Automatically start tunnel when router starts"));
      out.write("</label>\n            </td>\n        </tr><tr>\n");

            String stopFirst = intl._t("The hidden service must be stopped to change this setting");
            String tstopFirst = " title=\"" + stopFirst + "\" ";
            boolean canChangeDest = editBean.canChangePort(curTunnel);
            boolean isStreamrServer = "streamrserver".equals(tunnelType);
            boolean isBidirServer = "httpbidirserver".equals(tunnelType);
            boolean canChangePort = canChangeDest || !(isStreamrServer || isBidirServer);
            String phdisabled = canChangePort ? "" : tstopFirst;

      out.write("<th colspan=\"2\" ");
      out.print(phdisabled);
      out.write('>');
      out.write('\n');

            if (isStreamrServer) { 
      out.print(intl._t("Access Point"));
 } else { 
      out.print(intl._t("Target"));
 } 
      out.write("</th>\n        </tr><tr>\n");

            if (!isStreamrServer) {

      out.write("<td>\n                <b>");
      out.print(intl._t("Host"));
      out.write(":</b>\n                <input type=\"text\" size=\"20\" name=\"targetHost\" title=\"");
      out.print(intl._t("Hostname or IP address of the target server"));
      out.write("\" value=\"");
      out.print(editBean.getTargetHost(curTunnel));
      out.write("\" class=\"freetext host\" />\n            </td>\n");
          } /* !streamrserver */ 
      out.write("<td>\n                <b>");
      out.print(intl._t("Port"));
      out.write(":</b>\n                    ");
 String value = editBean.getTargetPort(curTunnel);
                       if (value == null || "".equals(value.trim())) {
                           out.write(" <span class=\"required\"><font color=\"red\">(");
                           out.write(intl._t("required"));
                           out.write(")</font></span>");
                       }
                       String asphelp = intl._t("Specify the local port this service should be accessible from");
                       String bsphelp = intl._t("Specify the port the server is running on");
                       String ptext = canChangePort ? (isStreamrServer ? asphelp : bsphelp) : stopFirst;
                       String pdisabled = canChangePort ? "" : " readonly=\"readonly\" ";

      out.write("<input type=\"text\" size=\"6\" maxlength=\"5\" id=\"targetPort\" name=\"targetPort\" title=\"");
      out.print(ptext);
      out.write("\" value=\"");
      out.print(editBean.getTargetPort(curTunnel));
      out.write("\" class=\"freetext port\" placeholder=\"required\" ");
      out.print(pdisabled);
      out.write('/');
      out.write('>');
      out.write('\n');
          if (!isStreamrServer) { 
      out.write("<label title=\"");
      out.print(intl._t("To avoid traffic sniffing if connecting to a remote server, you can enable an SSL connection. Note that the target server must be configured to accept SSL connections."));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"useSSL\"");
      out.print((editBean.isSSLEnabled(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Use SSL to connect to target"));
      out.write("</label>\n");
          } /* !streamrserver */ 
      out.write("</td>\n");
          if (isBidirServer) { 
      out.write("</tr><tr>\n            <th colspan=\"2\" ");
      out.print(phdisabled);
      out.write(">\n                ");
      out.print(intl._t("Access Point"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Port"));
      out.write(":</b>\n\n");
                      String value4 = editBean.getClientPort(curTunnel);
           	        if (value4 == null || "".equals(value4.trim())) {
           	            out.write(" <span class=\"required\"><font color=\"red\">(");
           	            out.write(intl._t("required"));
           	            out.write(")</font></span>");
           	        }
                       String csphelp = intl._t("Port required to access service (this can be a different port to the port the service is hosted on)");
                       String dsphelp = canChangePort ? csphelp : stopFirst;

      out.write("<input type=\"text\" size=\"6\" maxlength=\"5\" name=\"port\" title=\"");
      out.print(dsphelp);
      out.write("\" value=\"");
      out.print(editBean.getClientPort(curTunnel));
      out.write("\" class=\"freetext port\" placeholder=\"required\" ");
      out.print(pdisabled);
      out.write("/>\n            </td>\n");
          } /* httpbidirserver */
            if (isBidirServer || isStreamrServer) {

      out.write("<td>\n                <b>");
      out.print(intl._t("Reachable by"));
      out.write(":</b>\n");

                       String esphelp = intl._t("Listening interface (IP address) for client access (normally 127.0.0.1)");
                       String fsphelp = canChangePort ? esphelp : stopFirst;

      out.write("<select id=\"reachableBy\" name=\"reachableBy\" title=\"");
      out.print(fsphelp);
      out.write("\" class=\"selectbox\">\n");

                    String clientInterface = editBean.getClientInterface(curTunnel);
                    for (String ifc : editBean.interfaceSet()) {
                        out.write("<option value=\"");
                        out.write(ifc);
                        out.write('\"');
                        if (ifc.equals(clientInterface))
                            out.write(" selected=\"selected\"");
                        else if (!canChangePort)
                            out.write(" disabled=\"disabled\"");
                        out.write('>');
                        out.write(ifc);
                        out.write("</option>\n");
                    }

      out.write("</select>\n            </td>\n         ");
 } /* httpbidirserver || streamrserver */ 
      out.write("</tr>\n");
          if ("httpserver".equals(tunnelType) || isBidirServer) {

      out.write("<tr>\n            <th>\n                ");
      out.print(intl._t("Website Hostname"));
      out.write("</th>\n            <th class=\"excludeBackgroundImage\"></th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <input type=\"text\" size=\"20\" id=\"websiteName\" name=\"spoofedHost\" title=\"");
      out.print(intl._t("Website Hostname e.g. mysite.i2p"));
      out.write("\" value=\"");
      out.print(editBean.getSpoofedHost(curTunnel));
      out.write("\" class=\"freetext\" />\n                ");
      out.print(intl._t("(leave blank for outproxies)"));
      out.write("</td>\n        </tr>\n            ");
 }
          
      out.write("<tr>\n            <th>\n                ");
      out.print(intl._t("Local destination"));

                       String dhdisable = canChangeDest ? "" : tstopFirst;

      out.write("</th><th class=\"excludeBackgroundImage\" ");
      out.print(dhdisable);
      out.write(">\n                ");
      out.print(intl._t("Private key file"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <div class=\"displayText resetScrollLeft\" title=\"");
      out.print(intl._t("Read Only: Local Destination (if known)"));
      out.write("\" tabindex=\"0\">");
      out.print(editBean.getDestinationBase64(curTunnel));
      out.write("</div>\n            </td><td>\n");

                       String value3 = editBean.getPrivateKeyFile(curTunnel);
                       if (value3 == null || "".equals(value3.trim())) {
                           out.write(" <span class=\"required\"><font color=\"red\">(");
                           out.write(intl._t("required"));
                           out.write(")</font></span>");
                       }
                       String htext = intl._t("Path to Private Key File");
                       String dtext = canChangeDest ? htext : stopFirst;
                       String ddisabled = canChangeDest ? "" : " readonly=\"readonly\" ";

      out.write("<input type=\"text\" size=\"30\" id=\"privKeyFile\" name=\"privKeyFile\" title=\"");
      out.print(dtext);
      out.write("\" value=\"");
      out.print(editBean.getPrivateKeyFile(curTunnel));
      out.write("\" class=\"freetext\" placeholder=\"required\" ");
      out.print(ddisabled);
      out.write("/>\n            </td>\n        </tr>\n");

  /******
               if ("httpserver".equals(tunnelType) || isBidirServer) {
                   String sig = editBean.getNameSignature(curTunnel);
                   if (sig.length() > 0) {
          
      out.write("<div id=\"sigField\" class=\"rowItem\">\n                    ");
      out.print(intl._t("Hostname Signature"));
      out.write("<input type=\"text\" size=\"30\" readonly=\"readonly\" title=\"");
      out.print(intl._t("Use to prove that the website name is for this destination"));
      out.write("\" value=\"");
      out.print(sig);
      out.write("\" wrap=\"off\" class=\"freetext\" />\n            </div>\n         ");

                   }  // sig
               }  // type
  ****/

            String b64 = editBean.getDestinationBase64(curTunnel);
            net.i2p.util.PortMapper pm = net.i2p.I2PAppContext.getGlobalContext().portMapper();
            boolean hasImagegen = pm.getPort(net.i2p.util.PortMapper.SVC_IMAGEGEN) > 0;
            boolean hasSusiDNS = pm.getPort(net.i2p.util.PortMapper.SVC_SUSIDNS) > 0;
            if (!"".equals(b64)) {

      out.write("<tr>\n");

                b64 = b64.replace("=", "%3d");
                String name = editBean.getSpoofedHost(curTunnel);
                if (name == null || name.equals(""))
                    name = editBean.getTunnelName(curTunnel);
                // mysite.i2p is set in the installed i2ptunnel.config
                if (name != null && !name.equals("") && !name.equals("mysite.i2p") && !name.contains(" ") && name.endsWith(".i2p")) {

      out.write("<td class=\"buttons\" colspan=\"2\">\n");

                    if (hasImagegen) {

      out.write("<a class=\"control\" title=\"");
      out.print(intl._t("Generate a QR Code for this domain"));
      out.write("\" href=\"/imagegen/qr?s=320&amp;t=");
      out.print(name);
      out.write("&amp;c=http%3a%2f%2f");
      out.print(name);
      out.write("%2f%3fi2paddresshelper%3d");
      out.print(b64);
      out.write("\" target=\"_top\">");
      out.print(intl._t("Generate QR Code"));
      out.write("</a>\n");

                    }
                    if (hasSusiDNS) {

      out.write("<a class=\"control\" title=\"");
      out.print(intl._t("Add to Private addressbook"));
      out.write("\" href=\"/susidns/addressbook.jsp?book=private&amp;hostname=");
      out.print(name);
      out.write("&amp;destination=");
      out.print(b64);
      out.write("#add\">");
      out.print(intl._t("Add to local addressbook"));
      out.write("</a>\n");

                    }

      out.write("<a class=\"control\" title=\"");
      out.print(intl._t("Register, unregister or change details for hostname"));
      out.write("\" href=\"register?tunnel=");
      out.print(curTunnel);
      out.write('"');
      out.write('>');
      out.print(intl._t("Registration Authentication"));
      out.write("</a>\n");

                    if ("httpserver".equals(tunnelType) || isBidirServer) {

      out.write("<a class=\"control\" title=\"");
      out.print(intl._t("HTTPS configuration"));
      out.write("\" href=\"ssl?tunnel=");
      out.print(curTunnel);
      out.write('"');
      out.write('>');
      out.print(intl._t("SSL Wizard"));
      out.write("</a>\n");

                    }

      out.write("</td>\n");

                } else {

      out.write("<td class=\"infohelp\" colspan=\"2\">\n                ");
      out.print(intl._t("Note: In order to enable QR code generation or registration authentication, configure the Website Hostname field (for websites) or the Name field (everything else) above with an .i2p suffixed hostname e.g. mynewserver.i2p"));
      out.write("</td>\n");

                }  // name

      out.write("</tr>\n");

            }  // b64


      out.write("</table>\n\n    <h3>");
      out.print(intl._t("Advanced networking options"));
      out.write("</h3>\n\n    <table class=\"tunnelConfig\" id=\"lengthOption\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Length Options"));
      out.write("</th>\n        </tr>\n");
     if (editBean.isAdvanced()) {
      
      out.write("<tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Inbound"));
      out.write("</th>\n        </tr>");

      }  // isAdvanced()

      out.write("<tr>\n            <td>\n                <b>");
      out.print(intl._t("Length"));
      out.write("</b>\n            </td><td>\n                <b>");
      out.print(intl._t("Variance"));
      out.write("</b>\n            </td>\n        </tr><tr>\n            <td>\n                <select id=\"tunnelDepth\" name=\"tunnelDepth\" title=\"");
      out.print(intl._t("Length of each Tunnel"));
      out.write("\" class=\"selectbox\">\n                    ");
 int tunnelDepth = editBean.getTunnelDepth(curTunnel, 3);
                  
      out.write("<option value=\"0\"");
      out.print((tunnelDepth == 0 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 0));
      out.print(editBean.unlessAdvanced("no anonymity"));
      out.write("</option>\n                    <option value=\"1\"");
      out.print((tunnelDepth == 1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 1));
      out.print(editBean.unlessAdvanced("low anonymity"));
      out.write("</option>\n                    <option value=\"2\"");
      out.print((tunnelDepth == 2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 2));
      out.print(editBean.unlessAdvanced("medium anonymity"));
      out.write("</option>\n                    <option value=\"3\"");
      out.print((tunnelDepth == 3 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 3));
      out.print(editBean.unlessAdvanced("high anonymity"));
      out.write("</option>\n");
                 if (editBean.isAdvanced()) {
                  
      out.write("<option value=\"4\"");
      out.print((tunnelDepth == 4 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 4));
      out.write("</option>\n                    <option value=\"5\"");
      out.print((tunnelDepth == 5 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 5));
      out.write("</option>\n                    <option value=\"6\"");
      out.print((tunnelDepth == 6 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 6));
      out.write("</option>\n                    <option value=\"7\"");
      out.print((tunnelDepth == 7 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 7));
      out.write("</option>\n");
                 } else if (tunnelDepth > 3) { 
                
      out.write("<option value=\"");
      out.print(tunnelDepth);
      out.write("\" selected=\"selected\">");
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", tunnelDepth));
      out.write("</option>\n");
                 }
              
      out.write("</select>\n            </td><td>\n                <select id=\"tunnelVariance\" name=\"tunnelVariance\" title=\"");
      out.print(intl._t("Level of Randomization for Tunnel Depth"));
      out.write("\" class=\"selectbox\">\n                    ");
 int tunnelVariance = editBean.getTunnelVariance(curTunnel, 0);
                  
      out.write("<option value=\"0\"");
      out.print((tunnelVariance  ==  0 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("0 hop variance"));
      out.print(editBean.unlessAdvanced("no randomization, consistent performance"));
      out.write("</option>\n                    <option value=\"1\"");
      out.print((tunnelVariance  ==  1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+ 0-1 hop variance"));
      out.print(editBean.unlessAdvanced("medium randomization, lower performance"));
      out.write("</option>\n                    <option value=\"2\"");
      out.print((tunnelVariance  ==  2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+ 0-2 hop variance"));
      out.print(editBean.unlessAdvanced("high randomization, very low performance"));
      out.write("</option>\n                    <option value=\"-1\"");
      out.print((tunnelVariance == -1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+/- 0-1 hop variance"));
      out.print(editBean.unlessAdvanced("standard randomization, standard performance"));
      out.write("</option>\n                    <option value=\"-2\"");
      out.print((tunnelVariance == -2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+/- 0-2 hop variance"));
      out.print(editBean.unlessAdvanced("not recommended"));
      out.write("</option>\n");
                 if (tunnelVariance > 2 || tunnelVariance < -2) {
                
      out.write("<option value=\"");
      out.print(tunnelVariance);
      out.write("\" selected=\"selected\">");
      out.print( (tunnelVariance > 2 ? "+ " : "+/- ") );
      out.write('0');
      out.write('-');
      out.print(tunnelVariance);
      out.print(intl._t("hop variance"));
      out.write("</option>\n");
                 }
              
      out.write("</select>\n            </td>\n        </tr>\n        ");
     if (editBean.isAdvanced()) {
       // repeat two options above for outbound
      
      out.write("<tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Outbound"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Length"));
      out.write("</b>\n            </td><td>\n                <b>");
      out.print(intl._t("Variance"));
      out.write("</b>\n            </td>\n        </tr><tr>\n            <td>\n                <select id=\"tunnelDepthOut\" name=\"tunnelDepthOut\" title=\"");
      out.print(intl._t("Length of each Tunnel"));
      out.write("\" class=\"selectbox\">\n                    ");
 int tunnelDepthOut = editBean.getTunnelDepthOut(curTunnel, 3);
                  
      out.write("<option value=\"0\"");
      out.print((tunnelDepthOut == 0 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 0));
      out.write("</option>\n                    <option value=\"1\"");
      out.print((tunnelDepthOut == 1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 1));
      out.write("</option>\n                    <option value=\"2\"");
      out.print((tunnelDepthOut == 2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 2));
      out.write("</option>\n                    <option value=\"3\"");
      out.print((tunnelDepthOut == 3 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 3));
      out.write("</option>\n                    <option value=\"4\"");
      out.print((tunnelDepthOut == 4 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 4));
      out.write("</option>\n                    <option value=\"5\"");
      out.print((tunnelDepthOut == 5 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 5));
      out.write("</option>\n                    <option value=\"6\"");
      out.print((tunnelDepthOut == 6 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 6));
      out.write("</option>\n                    <option value=\"7\"");
      out.print((tunnelDepthOut == 7 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} hop tunnel", "{0} hop tunnel", 7));
      out.write("</option>\n                </select>\n            </td><td>\n                <select id=\"tunnelVarianceOut\" name=\"tunnelVarianceOut\" title=\"");
      out.print(intl._t("Level of Randomization for Tunnel Depth"));
      out.write("\" class=\"selectbox\">\n");
                 int tunnelVarianceOut = editBean.getTunnelVarianceOut(curTunnel, 0);
                  
      out.write("<option value=\"0\"");
      out.print((tunnelVarianceOut  ==  0 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("0 hop variance"));
      out.write("</option>\n                    <option value=\"1\"");
      out.print((tunnelVarianceOut  ==  1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+ 0-1 hop variance"));
      out.write("</option>\n                    <option value=\"2\"");
      out.print((tunnelVarianceOut  ==  2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+ 0-2 hop variance"));
      out.write("</option>\n                    <option value=\"-1\"");
      out.print((tunnelVarianceOut == -1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+/- 0-1 hop variance"));
      out.write("</option>\n                    <option value=\"-2\"");
      out.print((tunnelVarianceOut == -2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl._t("+/- 0-2 hop variance"));
      out.write("</option>\n");
                 if (tunnelVarianceOut > 2 || tunnelVarianceOut < -2) {
                
      out.write("<option value=\"");
      out.print(tunnelVarianceOut);
      out.write("\" selected=\"selected\">");
      out.print( (tunnelVarianceOut > 2 ? "+ " : "+/- ") );
      out.write('0');
      out.write('-');
      out.print(tunnelVarianceOut);
      out.print(intl._t("hop variance"));
      out.write("</option>\n");
                 }
              
      out.write("</select>\n            </td>\n        </tr>\n");

      }  // isAdvanced() End outbound config section

      out.write("</table>\n    <table class=\"tunnelConfig\" id=\"quantityOptions\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Quantity Options"));
      out.write("</th>\n        </tr>\n        <tr>\n");
     if (editBean.isAdvanced()) {
          
      out.write("<th colspan=\"2\">\n                ");
      out.print(intl._t("Inbound"));
      out.write("</th>");

      }  // isAdvanced()

      out.write("</tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Count"));
      out.write("</b>\n            </td><td>\n                <b>");
      out.print(intl._t("Backup Count"));
      out.write("</b>\n            </td>\n        </tr><tr>\n            <td>\n                <select id=\"tunnelQuantity\" name=\"tunnelQuantity\" title=\"");
      out.print(intl._t("Number of Tunnels in Group"));
      out.write("\" class=\"selectbox\">\n                    ");
      out.print(editBean.getQuantityOptions(curTunnel, editBean.isAdvanced() ? 1 : 0));
      out.write("</select>\n            </td><td>\n                <select id=\"tunnelBackupQuantity\" name=\"tunnelBackupQuantity\" title=\"");
      out.print(intl._t("Number of Reserve Tunnels"));
      out.write("\" class=\"selectbox\">\n");
                 int tunnelBackupQuantity = editBean.getTunnelBackupQuantity(curTunnel, 0);
                  
      out.write("<option value=\"0\"");
      out.print((tunnelBackupQuantity == 0 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 0));
      out.print(editBean.unlessAdvanced("no redundancy, no added resource usage"));
      out.write("</option>\n                    <option value=\"1\"");
      out.print((tunnelBackupQuantity == 1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 1));
      out.print(editBean.unlessAdvanced("low redundancy, low resource usage"));
      out.write("</option>\n                    <option value=\"2\"");
      out.print((tunnelBackupQuantity == 2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 2));
      out.print(editBean.unlessAdvanced("medium redundancy, medium resource usage"));
      out.write("</option>\n                    <option value=\"3\"");
      out.print((tunnelBackupQuantity == 3 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 3));
      out.print(editBean.unlessAdvanced("high redundancy, high resource usage"));
      out.write("</option>\n");

                   if (tunnelBackupQuantity > 3) {
                
      out.write("<option value=\"");
      out.print(tunnelBackupQuantity);
      out.write("\" selected=\"selected\">");
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", tunnelBackupQuantity));
      out.write("</option> \n");
                 }
              
      out.write("</select>\n            </td>\n        </tr>\n\n        ");
     if (editBean.isAdvanced()) {
       // repeat two options above for outbound
        
      out.write("<tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Outbound"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Count"));
      out.write("</b>\n            </td><td>\n                <b>");
      out.print(intl._t("Backup Count"));
      out.write("</b>\n            </td>\n        </tr><tr>\n            <td>\n                <select id=\"tunnelQuantityOut\" name=\"tunnelQuantityOut\" title=\"");
      out.print(intl._t("Number of Tunnels in Group"));
      out.write("\" class=\"selectbox\">\n                    ");
      out.print(editBean.getQuantityOptions(curTunnel, 2));
      out.write("</select>\n            </td><td>\n                <select id=\"tunnelBackupQuantityOut\" name=\"tunnelBackupQuantityOut\" title=\"");
      out.print(intl._t("Number of Reserve Tunnels"));
      out.write("\" class=\"selectbox\">\n");
                     int tunnelBackupQuantityOut = editBean.getTunnelBackupQuantityOut(curTunnel, 0);
                  
      out.write("<option value=\"0\"");
      out.print((tunnelBackupQuantityOut == 0 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 0));
      out.write("</option>\n                    <option value=\"1\"");
      out.print((tunnelBackupQuantityOut == 1 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 1));
      out.write("</option>\n                    <option value=\"2\"");
      out.print((tunnelBackupQuantityOut == 2 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 2));
      out.write("</option>\n                    <option value=\"3\"");
      out.print((tunnelBackupQuantityOut == 3 ? " selected=\"selected\"" : "") );
      out.write('>');
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", 3));
      out.write("</option>\n");
                 if (tunnelBackupQuantityOut > 3) {
                
      out.write("<option value=\"");
      out.print(tunnelBackupQuantityOut);
      out.write("\" selected=\"selected\">");
      out.print(intl.ngettext("{0} backup tunnel", "{0} backup tunnels", tunnelBackupQuantity));
      out.write("</option> \n");
                 }
              
      out.write("</select>\n            </td>\n        </tr>\n");

      }  // isAdvanced() End outbound config section


            boolean canChangeEncType = editBean.canChangeEncType(curTunnel);
            String ehdisabled = canChangeEncType ? "" : tstopFirst;

            // TODO, encrypted + offline is unimplemented
            if (!editBean.getIsOfflineKeys(curTunnel)) {

      out.write("</table>\n    <table class=\"tunnelConfig\" id=\"cryptoOptions\">\n        <tr>\n            <th colspan=\"2\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Cryptography Options"));
      out.write("</th>\n        </tr><tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Encrypt Leaseset"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n");

                String curEncryptMode = editBean.getEncryptMode(curTunnel);
                String cdisabled = canChangeEncType ? "" : " disabled=\"disabled\" ";

      out.write("<select id=\"encryptMode\" name=\"encryptMode\" class=\"selectbox\" ");
      out.print(ehdisabled);
      out.write(">\n                <option title=\"");
      out.print(intl._t("Allow all clients to connect to this service"));
      out.write("\" value=\"0\" ");
      out.print((curEncryptMode.equals("0") ? " selected=\"selected\"" : cdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Disable"));
      out.write("</option>\n");

                if (curEncryptMode.equals("10")) {

      out.write("<option title=\"");
      out.print(intl._t("Allow all clients to connect to this service"));
      out.write("\" value=\"10\" ");
      out.print((curEncryptMode.equals("10") ? " selected=\"selected\"" : cdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Disable"));
      out.write(" (LS2)</option>\n");

                } // mode = 10

      out.write("<option title=\"");
      out.print(intl._t("Send key to all users."));
      out.write("\" value=\"1\" ");
      out.print((curEncryptMode.equals("1") ? " selected=\"selected\"" : cdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Encrypted"));
      out.write(" (AES)</option>\n");

                int curSigType = editBean.getSigType(curTunnel, tunnelType);
                boolean allowBlinding = (curSigType == 7 || curSigType == 11);
                String bdisabled = (allowBlinding && canChangeEncType) ? "" : " disabled=\"disabled\" ";
                String bidisabled = (allowBlinding && canChangeEncType) ? "" : " readonly=\"readonly\" ";
                if (allowBlinding) {

      out.write("<option title=\"");
      out.print(intl._t("Prevents server discovery by floodfills"));
      out.write("\" value=\"2\" ");
      out.print((curEncryptMode.equals("2") ? " selected=\"selected\"" : bdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Blinded"));
      out.write("</option>\n");

                     if (true /* editBean.isAdvanced() */) {

      out.write("<option title=\"");
      out.print(intl._t("Send password to all users."));
      out.write("\" value=\"3\" ");
      out.print((curEncryptMode.equals("3") ? " selected=\"selected\"" : bdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Blinded with lookup password"));
      out.write("</option>\n                <option title=\"");
      out.print(intl._t("Send key to all users."));
      out.write("\" value=\"4\" ");
      out.print((curEncryptMode.equals("4") ? " selected=\"selected\"" : bdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Encrypted"));
      out.write(" (PSK)</option>\n                <option title=\"");
      out.print(intl._t("Send key and password to all users."));
      out.write("\" value=\"5\" ");
      out.print((curEncryptMode.equals("5") ? " selected=\"selected\"" : bdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Encrypted with lookup password"));
      out.write(" (PSK)</option>\n                <option title=\"");
      out.print(intl._t("Send individual key to each user."));
      out.write("\" value=\"6\" ");
      out.print((curEncryptMode.equals("6") ? " selected=\"selected\"" : bdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Encrypted with per-user key"));
      out.write(" (PSK)</option>\n                <option title=\"");
      out.print(intl._t("Send individual key to each user.") + ' ');
      out.print(intl._t("Send password to all users."));
      out.write("\" value=\"7\" ");
      out.print((curEncryptMode.equals("7") ? " selected=\"selected\"" : bdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Encrypted with lookup password and per-user key"));
      out.write(" (PSK)</option>\n                <option title=\"");
      out.print(intl._t("Enter key from each user."));
      out.write("\" value=\"8\" ");
      out.print((curEncryptMode.equals("8") ? " selected=\"selected\"" : bdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Encrypted with per-user key"));
      out.write(" (DH)</option>\n                <option title=\"");
      out.print(intl._t("Enter key from each user.") + ' ');
      out.print(intl._t("Send password to all users."));
      out.write("\" value=\"9\" ");
      out.print((curEncryptMode.equals("9") ? " selected=\"selected\"" : bdisabled));
      out.write(" >\n                    ");
      out.print(intl._t("Encrypted with lookup password and per-user key"));
      out.write(" (DH)</option>\n");

                     } // isAdvanced()
                } // allowBlinding

      out.write("</select>\n            </td>\n        </tr><tr>\n            <td>\n");

                if (allowBlinding /* && editBean.isAdvanced() */) {

      out.write('<');
      out.write('b');
      out.write('>');
      out.print(intl._t("Optional lookup password"));
      out.write(":</b>\n");

                } // allowBlinding

      out.write("</td><td>\n");

                // even if not shown, we need to preserve the param as a hidden input below
                // as it's the key we use to decrypt the PSK/DH LS on the router side
                boolean showSharedKey = curEncryptMode.equals("1") || curEncryptMode.equals("4") || curEncryptMode.equals("5");
                if (showSharedKey) {

      out.write('<');
      out.write('b');
      out.write('>');
      out.print(intl._t("Encryption Key"));
      out.write("</b>\n");

                } // showSharedKey

      out.write("</td>\n        </tr><tr>\n            <td>\n");

                if (allowBlinding /* && editBean.isAdvanced() */) {
                    String pwTitle = "title=\"" +
                                     (canChangeEncType ?
                                      intl._t("Set password required to access this service") :
                                      stopFirst) + '"';

      out.write("<input type=\"password\" name=\"nofilter_blindedPassword\" ");
      out.print(pwTitle);
      out.write(" value=\"");
      out.print(editBean.getBlindedPassword(curTunnel));
      out.write("\" class=\"freetext password\" ");
      out.print(bidisabled);
      out.write('/');
      out.write('>');
      out.write('\n');

                } // allowBlinding

      out.write("</td><td>\n                <input type=\"");
      out.print(showSharedKey ? "text" : "hidden");
      out.write("\" size=\"44\" id=\"leasesetKey\" name=\"encryptKey\" title=\"");
      out.print(intl._t("Encryption key required to access this service"));
      out.write("\" readonly=\"readonly\" value=\"");
      out.print(editBean.getEncryptKey(curTunnel));
      out.write("\" class=\"freetext\"/>\n            </td>\n        </tr>\n");

                if (allowBlinding /* && editBean.isAdvanced() */) {
                    boolean pskClient = curEncryptMode.equals("6") || curEncryptMode.equals("7");
                    boolean dhClient = curEncryptMode.equals("8") || curEncryptMode.equals("9");
                    if (pskClient || dhClient) {
                        // b64Name:b64Key
                        java.util.List<String> clientAuths = editBean.getClientAuths(curTunnel, dhClient);
                        if (!clientAuths.isEmpty()) {

      out.write("<tr><td><b>");
      out.print(intl._t("Revoke"));
      out.write("&nbsp;&nbsp;&nbsp;&nbsp;");
      out.print(intl._t("Client Name"));
      out.write("</b></td><td><b>");
      out.print(intl._t("Client Key"));
      out.write("</b></td></tr>\n");

                            int i = 0;
                            for (String clientAuth : clientAuths) {
                                String[] split = net.i2p.data.DataHelper.split(clientAuth, ":", 2);
                                String cname, ckey;
                                if (split.length == 2) {
                                    cname = split[0];
                                    ckey = split[1];
                                } else {
                                    cname = "";
                                    ckey = split[0];
                                }
                                if (cname.length() > 0) {
                                    cname = net.i2p.data.DataHelper.escapeHTML(net.i2p.data.DataHelper.getUTF8(net.i2p.data.Base64.decode(cname)));
                                } else {
                                    cname = intl._t("Client") + ' ' + (i + 1);
                                }

      out.write("<tr>\n                <td><input value=\"");
      out.print(i);
      out.write("\" type=\"checkbox\" name=\"revokeClient\" class=\"tickbox\" />\n                    <input type=\"text\" value=\"");
      out.print(cname);
      out.write("\" size=\"44\" name=\"nofilter_clientName\" class=\"freetext\" /></td>\n                <td><input type=\"text\" id=\"leasesetKey\" value=\"");
      out.print(ckey);
      out.write("\" size=\"44\" name=\"clientKey\" readonly=\"readonly\" class=\"freetext\" />\n                </tr>\n");

                                i++;
                            } // for
                        } // isEmpty

      out.write("<tr><td><b>");
      out.print(intl._t("Add"));
      out.write("&nbsp;&nbsp;&nbsp;&nbsp;");
      out.print(intl._t("Client Name"));
      out.write("</b></td><td>\n");

                            if (dhClient) {

      out.write('<');
      out.write('b');
      out.write('>');
      out.print(intl._t("Client Key"));
      out.write("</b>\n");

                            } // dhClient

      out.write("</td></tr><tr>\n                <td><input value=\"1\" type=\"checkbox\" name=\"addClient\" class=\"tickbox\" />\n                    <input type=\"text\" value=\"");
      out.print(intl._t("Client") + ' ' + (clientAuths.size() + 1));
      out.write("\" size=\"44\" name=\"nofilter_newClientName\" class=\"freetext\" /></td>\n                <td>\n");

                            if (dhClient) {

      out.write("<input type=\"text\" id=\"leasesetKey\" value=\"\" size=\"44\" maxlength=\"44\" name=\"newClientKey\" class=\"freetext\" />\n");

                            } // dhClient

      out.write("</td></tr>\n");

                    } // pskClient || dhClient
                } // allowBlinding
            } // !isOffline

 /***************** 
      out.write("<tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("New Certificate type"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <span class=\"multiOption\"><label title=\"");
      out.print(intl._t("No Certificate"));
      out.write('"');
      out.write('>');
      out.print(intl._t("None"));
      out.write("<input value=\"0\" type=\"radio\" id=\"startOnLoad\" name=\"cert\"");
      out.print((editBean.getCert(curTunnel)==0 ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" /></label></span>\n                <span class=\"multiOption\"><label title=\"");
      out.print(intl._t("Hashcash Certificate"));
      out.write('"');
      out.write('>');
      out.print(intl._t("Hashcash (effort)"));
      out.write("<input value=\"1\" type=\"radio\" id=\"startOnLoad\" name=\"cert\"");
      out.print((editBean.getCert(curTunnel)==1 ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" /></label>\n                <input type=\"text\" id=\"port\" name=\"effort\" size=\"2\" maxlength=\"2\" title=\"");
      out.print(intl._t("Hashcash Effort"));
      out.write("\" value=\"");
      out.print(editBean.getEffort(curTunnel));
      out.write("\" class=\"freetext\" /></span>\n            </td>\n        </tr><tr>\n            <th>\n                ");
      out.print(intl._t("Hashcash Calc Time"));
      out.write("</th><th>\n                ");
      out.print(intl._t("Hidden"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <button class=\"control\" type=\"submit\" name=\"action\" value=\"Estimate\" title=\"");
      out.print(intl._t("Estimate Calculation Time"));
      out.write('"');
      out.write('>');
      out.print(intl._t("Estimate"));
      out.write("</button>\n            </td><td>\n                <input value=\"2\" type=\"radio\" id=\"startOnLoad\" name=\"cert\" title=\"");
      out.print(intl._t("Hidden Certificate"));
      out.write('"');
      out.print((editBean.getCert(curTunnel)==2 ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n            </td>\n        </tr><tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Signed Certificate"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <label title=\"");
      out.print(intl._t("Signed Certificate"));
      out.write('"');
      out.write('>');
      out.print(intl._t("Signed (signed by)"));
      out.write(":\n                <input value=\"3\" type=\"radio\" id=\"startOnLoad\" name=\"cert\"");
      out.print((editBean.getCert(curTunnel)==3 ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" /></label>\n                <input type=\"text\" id=\"port\" name=\"signer\" size=\"50\" title=\"");
      out.print(intl._t("Cert Signer"));
      out.write("\" value=\"");
      out.print(editBean.getSigner(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td>\n        </tr><tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Modify Certificate"));
      out.write("&nbsp;");
      out.print(intl._t("(Tunnel must be stopped first)"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <button class=\"control\" type=\"submit\" name=\"action\" value=\"Modify\" title=\"");
      out.print(intl._t("Force new Certificate now"));
      out.write('"');
      out.write('>');
      out.print(intl._t("Modify"));
      out.write("</button>\n            </td>\n        </tr>\n");

   **********************/
            int currentSigType = editBean.getSigType(curTunnel, tunnelType);
            String tooLate = intl._t("Configuration cannot be changed after destination is created");
            String tTooLate = " title=\"" + tooLate + "\" ";
            boolean canChangeSigType = editBean.canChangeSigType(curTunnel);
            String shdisabled = canChangeSigType ? "" : tTooLate;
            String disabled = canChangeSigType ? "" : " disabled=\"disabled\" ";

      out.write("<tr>\n            <th colspan=\"2\" ");
      out.print(shdisabled);
      out.write(">\n                ");
      out.print(intl._t("Signature type"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <select id=\"sigType\" name=\"sigType\" class=\"selectbox\" ");
      out.print(shdisabled);
      out.write(">\n                    <option title=\"");
      out.print(intl._t("Legacy option (deprecated), provided for backward compatibility"));
      out.write("\" value=\"0\" ");
      out.print((currentSigType==0 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    DSA-SHA1</option>\n");
           if (editBean.isSigTypeAvailable(1)) { 
      out.write("<option value=\"1\" ");
      out.print((currentSigType==1 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    ECDSA-P256</option>\n");
            }
              if (editBean.isSigTypeAvailable(2)) { 
      out.write("<option value=\"2\" ");
      out.print((currentSigType==2 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    ECDSA-P384</option>\n");
            }
              if (editBean.isSigTypeAvailable(3)) { 
      out.write("<option value=\"3\" ");
      out.print((currentSigType==3 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    ECDSA-P521</option>\n");
            }
              if (editBean.isSigTypeAvailable(7)) { 
      out.write("<option title=\"");
      out.print(intl._t("This is the default, recommended option"));
      out.write("\" value=\"7\" ");
      out.print((currentSigType==7 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    Ed25519-SHA-512</option>\n");
            }
              if (editBean.isSigTypeAvailable(11)) { 
      out.write("<option title=\"");
      out.print(intl._t("Recommended for blinded and encrypted destinations"));
      out.write("\" value=\"11\" ");
      out.print((currentSigType==11 ? " selected=\"selected\"" : disabled));
      out.write(" >\n                    Red25519-SHA-512</option>\n");
            }   // isAvailable

      out.write("</select>\n            </td>\n        </tr>\n");

                boolean has0 = editBean.hasEncType(curTunnel, 0);
                boolean has4 = editBean.hasEncType(curTunnel, 4);
                String edisabled = canChangeEncType ? "" : " disabled=\"disabled\" ";

      out.write("<tr>\n            <th colspan=\"2\" ");
      out.print(ehdisabled);
      out.write(">\n                ");
      out.print(intl._t("Encryption types"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <span class=\"multiOption\" ");
      out.print(ehdisabled);
      out.write(">\n                    <label><input value=\"0\" type=\"radio\" id=\"startOnLoad\" name=\"encType\" ");
      out.print((has0 ? " checked=\"checked\"" : edisabled));
      out.write(" class=\"tickbox\" />\n                    ElGamal-2048</label>\n                </span>\n                <span class=\"multiOption\" ");
      out.print(ehdisabled);
      out.write(">\n                    <label><input value=\"4\" type=\"radio\" id=\"startOnLoad\" name=\"encType\" ");
      out.print((has4 ? " checked=\"checked\"" : edisabled));
      out.write(" class=\"tickbox\" />\n                    ECIES-X25519 (");
      out.print(intl._t("Experts only!"));
      out.write(")</label>\n                </span>\n                <span class=\"multiOption\" ");
      out.print(ehdisabled);
      out.write(">\n                    <label><input value=\"4,0\" type=\"radio\" id=\"startOnLoad\" name=\"encType\" ");
      out.print(((has0 && has4) ? " checked=\"checked\"" : edisabled));
      out.write(" class=\"tickbox\" />\n                    ");
      out.print(intl._t("Both encryption types"));
      out.write("</label>\n                </span>\n            </td>\n        </tr>\n");

            /* alternate dest, only if current dest is set and is DSA_SHA1 */

            if (currentSigType == 0 && !"".equals(b64) && !isStreamrServer) {
                String attitle = canChangeEncType ? "" : tstopFirst;
                String atitle = canChangeEncType ? intl._t("Path to Private Key File") : stopFirst;
                String adisabled = canChangeEncType ? "" : " readonly=\"readonly\" ";

      out.write("<tr>\n            <th colspan=\"2\" ");
      out.print(attitle);
      out.write(" >\n                ");
      out.print(intl._t("Alternate private key file"));
      out.write(" (Ed25519-SHA-512)\n            </th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <input type=\"text\" class=\"freetext\" size=\"30\" id=\"altPrivKeyFile\" name=\"altPrivKeyFile\" title=\"");
      out.print(atitle);
      out.write('"');
      out.write(' ');
      out.print(adisabled);
      out.write(" value=\"");
      out.print(editBean.getAltPrivateKeyFile(curTunnel));
      out.write("\" />\n            </td>\n        </tr>\n");

              String ab64 = editBean.getAltDestinationBase64(curTunnel);
              if (!"".equals(ab64)) {

      out.write("<tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Alternate local destination"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <div class=\"displayText resetScrollLeft\" title=\"");
      out.print(intl._t("Read Only: Alternate Local Destination"));
      out.write('"');
      out.write('>');
      out.print(ab64);
      out.write("</div>\n            </td>\n        </tr><tr>\n            <td colspan=\"2\">\n                ");
      out.print(editBean.getAltDestHashBase32(curTunnel));
      out.write("</td>\n        </tr>\n");

                ab64 = ab64.replace("=", "%3d");
                String name = editBean.getSpoofedHost(curTunnel);
                if (name == null || name.equals(""))
                    name = editBean.getTunnelName(curTunnel);
                // mysite.i2p is set in the installed i2ptunnel.config
                if (name != null && !name.equals("") && !name.equals("mysite.i2p") && !name.contains(" ") && name.endsWith(".i2p")) {

      out.write("<tr>\n            <td class=\"buttons\" colspan=\"2\">\n");

                    if (hasImagegen) {

      out.write("<a class=\"control\" title=\"");
      out.print(intl._t("Generate QR Code"));
      out.write("\" href=\"/imagegen/qr?s=320&amp;t=");
      out.print(name);
      out.write("&amp;c=http%3a%2f%2f");
      out.print(name);
      out.write("%2f%3fi2paddresshelper%3d");
      out.print(ab64);
      out.write("\" target=\"_top\">");
      out.print(intl._t("Generate QR Code"));
      out.write("</a>\n");

                    }
                    if (hasSusiDNS) {

      out.write("<a class=\"control\" title=\"");
      out.print(intl._t("Add to Private addressbook"));
      out.write("\" href=\"/susidns/addressbook.jsp?book=private&amp;hostname=");
      out.print(name);
      out.write("&amp;destination=");
      out.print(ab64);
      out.write("#add\">");
      out.print(intl._t("Add to local addressbook"));
      out.write("</a>\n");

                    }

      out.write("</td></tr>\n");

                } else {

      out.write("<tr>\n            <td colspan=\"2\">\n                ");
      out.print(intl._t("Note: In order to enable QR code generation or registration authentication, configure the Website Hostname field (for websites) or the Name field (everything else) above with an .i2p suffixed hostname e.g. mynewserver.i2p"));
      out.write("</td>\n        </tr>\n");

                }  // name
              }  // ab64
           } // currentSigType

      out.write("</table>\n    <table class=\"tunnelConfig\" id=\"accessOptions\">\n        <tr>\n            <th colspan=\"8\" class=\"tableTop\">\n                ");
      out.print(intl._t("Tunnel Access Control Options"));
      out.write("</th>\n        </tr><tr>\n            <th colspan=\"8\">\n                ");
      out.print(intl._t("Restricted Access List"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"8\">\n                <span class=\"multiOption\"><label title=\"");
      out.print(intl._t("Allow all clients to connect to this service"));
      out.write("\"><input value=\"0\" type=\"radio\" name=\"accessMode\"");
      out.print((editBean.getAccessMode(curTunnel).equals("0") ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                    ");
      out.print(intl._t("Disable"));
      out.write("</label></span>\n                <span class=\"multiOption\"><label title=\"");
      out.print(intl._t("Prevent listed clients from connecting to this service"));
      out.write("\"><input value=\"2\" type=\"radio\" name=\"accessMode\"");
      out.print((editBean.getAccessMode(curTunnel).equals("2") ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                    ");
      out.print(intl._t("Deny List"));
      out.write("</label></span>\n                <span class=\"multiOption\"><label title=\"");
      out.print(intl._t("Only allow listed clients to connect to this service"));
      out.write("\"><input value=\"1\" type=\"radio\" name=\"accessMode\"");
      out.print((editBean.getAccessMode(curTunnel).equals("1") ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                    ");
      out.print(intl._t("Allow List"));
      out.write("</label></span>\n            </td>\n        </tr><tr>\n            <td colspan=\"8\">\n                <b>");
      out.print(intl._t("Access List Description"));
      out.write("</b> (");
      out.print(intl._t("Specify clients, 1 per line"));
      out.write(")\n            </td>\n        </tr><tr>\n            <td colspan=\"8\">\n                <textarea rows=\"2\" style=\"height: 8em;\" cols=\"60\" name=\"accessList\" title=\"");
      out.print(intl._t("Control access to this service"));
      out.write("\" wrap=\"off\" spellcheck=\"false\">");
      out.print(editBean.getAccessList(curTunnel));
      out.write("</textarea>\n            </td>\n        </tr><tr>\n            <td colspan=\"8\">\n                <b>");
      out.print(intl._t("Filter Definition File"));
      out.write("</b>\n            </td>\n        </tr><tr>\n            <td colspan=\"8\">\n                ");
      out.print(intl._t("You can define an advanced filter for this tunnel."));
      out.write(" (<a href=\"http://i2p-projekt.i2p/spec/filter-format\" target=\"_blank\">");
      out.print(intl._t("Format Specification"));
      out.write("</a>)  \n            </td>\n        </tr><tr>\n            <td colspan=\"8\">\n                <label for=\"filterDefinition\">");
      out.print(intl._t("Absolute path to file containing filter definition"));
      out.write("</label>\n                <input type=\"text\" id=\"filterDefinition\" name=\"filterDefinition\" value=\"");
      out.print(editBean.getFilterDefinition(curTunnel));
      out.write("\" size=\"80\"/>\n            </td>\n        </tr><tr>\n            <th colspan=\"8\">\n                ");
      out.print(intl._t("Server Access Options"));
      out.write("</th>\n        </tr>\n        ");

               if ("httpserver".equals(tunnelType) || isBidirServer) {

      out.write("<tr>\n            <td>\n                <label title=\"");
      out.print(intl._t("Prevent clients from accessing this service via an inproxy"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"rejectInproxy\"");
      out.print((editBean.isRejectInproxy(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Block Access via Inproxies"));
      out.write("</label>\n            </td><td colspan=\"7\">\n                <label><input value=\"1\" type=\"checkbox\" name=\"rejectReferer\"");
      out.print((editBean.isRejectReferer(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Block Accesses containing Referers"));
      out.write("</label>\n            </td>\n        </tr><tr>\n            <td>\n                <label title=\"");
      out.print(intl._t("Deny User-Agents matching these strings (probably from inproxies)"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"rejectUserAgents\"");
      out.print((editBean.isRejectUserAgents(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Block these User-Agents"));
      out.write("</label>\n            </td><td colspan=\"7\">\n                <input type=\"text\" id=\"userAgents\" name=\"userAgents\" size=\"20\" title=\"");
      out.print(intl._t("comma separated, e.g. Mozilla,Opera (case-sensitive)"));
      out.write("\" value=\"");
      out.print(editBean.getUserAgents(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td>\n        </tr>\n");
             } // httpserver

      out.write("<tr>\n            <td>\n                <label title=\"");
      out.print(intl._t("Use unique IP addresses for each connecting client (local non-SSL servers only)"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"uniqueLocal\"");
      out.print((editBean.getUniqueLocal(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Unique Local Address per Client"));
      out.write("</label>\n            </td><td colspan=\"7\">\n                <label title=\"");
      out.print(intl._t("Only enable if you are hosting this service on multiple routers"));
      out.write("\"><input value=\"1\" type=\"checkbox\" name=\"multihome\"");
      out.print((editBean.getMultihome(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Optimize for Multihoming"));
      out.write("</label>\n            </td>\n        </tr>\n    </table>\n    <table class=\"tunnelConfig\" id=\"performanceOptions\">\n        <tr>\n            <th colspan=\"5\" class=\"tableTop\">\n            ");
      out.print(intl._t("Tunnel Performance Options"));
      out.write("</th>\n        </tr>\n");

            if (!isStreamrServer) {

      out.write("<tr>\n            <th colspan=\"5\">\n                ");
      out.print(intl._t("Profile"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"5\">\n                <select id=\"profile\" name=\"profile\" title=\"");
      out.print(intl._t("Connection Profile"));
      out.write("\" class=\"selectbox\">\n                    ");
 boolean interactiveProfile = editBean.isInteractive(curTunnel);
                  
      out.write("<option ");
      out.print((interactiveProfile == true  ? "selected=\"selected\" " : ""));
      out.write("value=\"interactive\">");
      out.print(intl._t("interactive connection"));
      out.write("</option>\n                    <option ");
      out.print((interactiveProfile == false ? "selected=\"selected\" " : ""));
      out.write("value=\"bulk\">");
      out.print(intl._t("bulk connection (downloads/websites/BT)"));
      out.write("</option>\n                </select>\n            </td>\n        </tr>\n");

            } /* !streamrserver */

      out.write("<tr>\n            <th colspan=\"5\">\n                ");
      out.print(intl._t("Reduce tunnel quantity when idle"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"5\">\n                <label><input value=\"1\" type=\"checkbox\" id=\"startOnLoad\" name=\"reduce\" ");
      out.print((editBean.getReduce(curTunnel) ? " checked=\"checked\"" : ""));
      out.write(" class=\"tickbox\" />\n                ");
      out.print(intl._t("Reduce tunnel quantity when idle to conserve resources"));
      out.write("</label>\n            </td>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Reduced tunnel count"));
      out.write(":</b>\n                <input type=\"text\" id=\"reduceCount\" name=\"reduceCount\" size=\"1\" maxlength=\"1\" title=\"");
      out.print(intl._t("Number of tunnels to keep open to maintain availability of service"));
      out.write("\" value=\"");
      out.print(editBean.getReduceCount(curTunnel));
      out.write("\" class=\"freetext quantity\" />\n            </td>\n\n            <td colspan=\"4\">\n                <b>");
      out.print(intl._t("Idle period"));
      out.write(":</b>\n                <input type=\"text\" id=\"reduceTime\" name=\"reduceTime\" size=\"4\" maxlength=\"4\" title=\"");
      out.print(intl._t("Period of inactivity before tunnel number is reduced"));
      out.write("\" value=\"");
      out.print(editBean.getReduceTime(curTunnel));
      out.write("\" class=\"freetext period\" />\n                ");
      out.print(intl._t("minutes"));
      out.write("</td>\n        </tr><tr>\n            <th colspan=\"8\">\n                ");
      out.print(intl._t("Server Throttling"));
      out.write("</th>\n        </tr><tr>\n            <th colspan=\"5\">\n                ");
      out.print(intl._t("Inbound connection limits (0=unlimited)"));
      out.write("</th>\n        </tr><tr>\n            <td></td>\n            <td><b>");
      out.print(intl._t("Per Minute"));
      out.write("</b></td>\n            <td><b>");
      out.print(intl._t("Per Hour"));
      out.write("</b></td>\n            <td><b>");
      out.print(intl._t("Per Day"));
      out.write("</b></td>\n            <td class=\"blankColumn\"></td>\n        </tr><tr>\n            <td><b>");
      out.print(intl._t("Per Client"));
      out.write("</b></td>\n            <td>\n                <input type=\"text\" name=\"limitMinute\" title=\"");
      out.print(intl._t("Maximum number of web page requests per minute for a unique client before access to the server is blocked"));
      out.write("\" value=\"");
      out.print(editBean.getLimitMinute(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td><td>\n                <input type=\"text\" name=\"limitHour\" title=\"");
      out.print(intl._t("Maximum number of web page requests per hour for a unique client before access to the server is blocked"));
      out.write("\" value=\"");
      out.print(editBean.getLimitHour(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td><td>\n                <input type=\"text\" name=\"limitDay\" title=\"");
      out.print(intl._t("Maximum number of web page requests per day for a unique client before access to the server is blocked"));
      out.write("\" value=\"");
      out.print(editBean.getLimitDay(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td><td class=\"blankColumn\"></td>\n        </tr><tr>\n            <td><b>");
      out.print(intl._t("Total"));
      out.write("</b></td>\n            <td>\n                <input type=\"text\" name=\"totalMinute\" title=\"");
      out.print(intl._t("Total number of web page requests per minute before access to the server is blocked"));
      out.write("\" value=\"");
      out.print(editBean.getTotalMinute(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td><td>\n                <input type=\"text\" name=\"totalHour\" title=\"");
      out.print(intl._t("Total number of web page requests per hour before access to the server is blocked"));
      out.write("\" value=\"");
      out.print(editBean.getTotalHour(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td><td>\n                <input type=\"text\" name=\"totalDay\" title=\"");
      out.print(intl._t("Total number of web page requests per day before access to the server is blocked"));
      out.write("\" value=\"");
      out.print(editBean.getTotalDay(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td><td class=\"blankColumn\"></td>\n        </tr><tr>\n            <th colspan=\"5\">");
      out.print(intl._t("Max concurrent connections (0=unlimited)"));
      out.write("</th>\n        </tr><tr>\n            <td></td><td>\n                <input type=\"text\" name=\"maxStreams\" title=\"");
      out.print(intl._t("Maximum number of simultaneous client connections"));
      out.write("\" value=\"");
      out.print(editBean.getMaxStreams(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td><td></td><td></td><td class=\"blankColumn\"></td>\n        </tr>\n");

               if ("httpserver".equals(tunnelType) || isBidirServer) {

      out.write("<tr>\n            <th colspan=\"5\">\n                ");
      out.print(intl._t("POST limits (0=unlimited)"));
      out.write("</th>\n        </tr><tr>\n            <td></td><td>\n                <b>");
      out.print(intl._t("Per Period"));
      out.write("</b>\n            </td><td>\n                <b>");
      out.print(intl._t("Ban Duration"));
      out.write("</b>\n            </td><td></td><td class=\"blankColumn\"></td>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Per Client"));
      out.write("</b>\n            </td><td>\n                <input type=\"text\" name=\"postMax\" title=\"");
      out.print(intl._t("Maximum number of post requests permitted for a unique client for the configured timespan"));
      out.write("\" value=\"");
      out.print(editBean.getPostMax(curTunnel));
      out.write("\" class=\"freetext quantity\"/>\n            </td><td colspan=\"2\">\n                <input type=\"text\" name=\"postBanTime\" title=\"");
      out.print(intl._t("If a client exceeds the maximum number of post requests per allocated period, enforce a ban for this number of minutes"));
      out.write("\" value=\"");
      out.print(editBean.getPostBanTime(curTunnel));
      out.write("\" class=\"freetext period\"/>\n                ");
      out.print(intl._t("minutes"));
      out.write("</td><td class=\"blankColumn\"></td>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Total"));
      out.write("</b>\n            </td><td>\n                <input type=\"text\" name=\"postTotalMax\" title=\"");
      out.print(intl._t("Total number of post requests permitted for the configured timespan"));
      out.write("\" value=\"");
      out.print(editBean.getPostTotalMax(curTunnel));
      out.write("\" class=\"freetext quantity\"/>\n            </td><td colspan=\"2\">\n                <input type=\"text\" name=\"postTotalBanTime\" title=\"");
      out.print(intl._t("If the maximum number of post requests per allocated period is exceeded, enforce a global access ban for this number of minutes"));
      out.write("\" value=\"");
      out.print(editBean.getPostTotalBanTime(curTunnel));
      out.write("\" class=\"freetext period\"/>\n                ");
      out.print(intl._t("minutes"));
      out.write("</td><td class=\"blankColumn\"></td>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("POST limit period"));
      out.write("</b>\n            </td><td colspan=\"2\">\n                <input type=\"text\" name=\"postCheckTime\" title=\"");
      out.print(intl._t("Timespan for the maximum number of post requests to be reached before a ban is triggered"));
      out.write("\" value=\"");
      out.print(editBean.getPostCheckTime(curTunnel));
      out.write("\" class=\"freetext period\"/>\n                ");
      out.print(intl._t("minutes"));
      out.write("</td><td></td><td class=\"blankColumn\"></td>\n        </tr>\n");
             } // httpserver


            if (!editBean.isRouterContext()) {

      out.write("</table>\n    <table class=\"tunnelConfig\">\n        <tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Router I2CP Address"));
      out.write("</th>\n        </tr><tr>\n            <td>\n                <b>");
      out.print(intl._t("Host"));
      out.write(":</b>\n                <input type=\"text\" id=\"clientHost\" name=\"clientHost\" size=\"20\" title=\"");
      out.print(intl._t("I2CP Hostname or IP"));
      out.write("\" value=\"");
      out.print(editBean.getI2CPHost(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td><td>\n                <b>");
      out.print(intl._t("Port"));
      out.write(":</b>\n                <input type=\"text\" id=\"clientPort\" name=\"clientport\" size=\"20\" title=\"");
      out.print(intl._t("I2CP Port Number"));
      out.write("\" value=\"");
      out.print(editBean.getI2CPPort(curTunnel));
      out.write("\" class=\"freetext\" />\n            </td>\n        </tr>\n");

            } // !isRouterContext

      out.write("</table>\n    <table class=\"tunnelConfig\" id=\"customOptions\">\n        <tr>\n            <th colspan=\"2\">\n                ");
      out.print(intl._t("Custom options"));
      out.write("</th>\n        </tr><tr>\n            <td colspan=\"2\">\n                <input type=\"text\" class=\"freetext\" id=\"customOptions\" name=\"nofilter_customOptions\" size=\"60\" title=\"");
      out.print(intl._t("Advanced tunnel, streaming, and I2CP options"));
      out.write("\" value=\"");
      out.print(editBean.getCustomOptions(curTunnel));
      out.write("\" />\n            </td>\n        </tr><tr>\n            <td class=\"buttons\" colspan=\"2\">\n                    <input type=\"hidden\" value=\"true\" name=\"removeConfirm\" />\n                    <button id=\"controlCancel\" class=\"control\" type=\"submit\" name=\"action\" value=\"\">");
      out.print(intl._t("Cancel"));
      out.write("</button>\n                    <button id=\"controlDelete\" class=\"control delete\" type=\"submit\" name=\"action\" value=\"Delete this proxy\" title=\"");
      out.print(intl._t("Delete this Proxy (cannot be undone)"));
      out.write('"');
      out.write('>');
      out.print(intl._t("Delete"));
      out.write("</button>\n                    <button id=\"controlSave\" class=\"control\" type=\"submit\" name=\"action\" value=\"Save changes\">");
      out.print(intl._t("Save"));
      out.write("</button>\n            </td>\n        </tr>\n    </table>\n");

        }

      out.write("</div>\n  </form>\n");

    } else {
        
      out.write("<div id=\"notReady\">");
      out.print(intl._t("Tunnels not initialized yet; please retry in a few moments."));
      out.write("</div>");

    }  // isInitialized()
}

      out.write("</body>\n</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
