/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package net.i2p.router.web.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class welcome_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/formhandler.jsi", Long.valueOf(1607264743000L));
    _jspx_dependants.put("/css.jsi", Long.valueOf(1607264743000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      net.i2p.router.web.helpers.WizardHelper wizhelper = null;
      synchronized (session) {
        wizhelper = (net.i2p.router.web.helpers.WizardHelper) _jspx_page_context.getAttribute("wizhelper", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (wizhelper == null){
          wizhelper = new net.i2p.router.web.helpers.WizardHelper();
          _jspx_page_context.setAttribute("wizhelper", wizhelper, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }

    // note that for the helper we use a session scope, not a request scope,
    // so that we can access the NDT test results.
    // The MLabHelper singleton will prevent multiple simultaneous tests, even across sessions.

    // page ID
    final int LAST_PAGE = 6;
    String pg = request.getParameter("page");
    int ipg;
    if (pg == null) {
        ipg = 1;
    } else {
        try {
            ipg = Integer.parseInt(pg);
            if (request.getParameter("prev") != null) {
                // previous button handling
                if (ipg == 5)
                    ipg = 2;
                else
                    ipg -= 2;
            }
            if (ipg <= 0 || ipg > LAST_PAGE) {
                ipg = 1;
            } else if (ipg == 3 && request.getParameter("skipbw") != null) {
                ipg++;  // skip bw test
            }
        } catch (NumberFormatException nfe) {
            ipg = 1;
        }
    }

    // detect completion
    boolean done = request.getParameter("done") != null || request.getParameter("skip") != null;
    if (done) {
        // tell wizard helper we're done
        String i2pcontextId = request.getParameter("i2p.contextId");
        try {
            if (i2pcontextId != null) {
                session.setAttribute("i2p.contextId", i2pcontextId);
            } else {
                i2pcontextId = (String) session.getAttribute("i2p.contextId");
            }
        } catch (IllegalStateException ise) {}
        wizhelper.setContextId(i2pcontextId);
        wizhelper.complete();

        // redirect to /home
        response.setStatus(307);
        response.setHeader("Cache-Control","no-cache");
        String req = request.getRequestURL().toString();
        int slash = req.indexOf("/welcome");
        if (slash >= 0)
            req = req.substring(0, slash) + "/home";
        else // shouldn't happen
            req = "http://127.0.0.1:7657/home";
        response.setHeader("Location", req);
        // force commitment
        response.getOutputStream().close();
        return;
    }

      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head>\n");

   /*
    * This should be included inside <head>...</head>,
    * as it sets the stylesheet.
    *
    * This is included almost 30 times, so keep whitespace etc. to a minimum.
    */

   // http://www.crazysquirrel.com/computing/general/form-encoding.jspx
   if (request.getCharacterEncoding() == null)
       request.setCharacterEncoding("UTF-8");

   // Now that we use POST for most forms, these prevent the back button from working after a form submit
   // Just let the browser do its thing
   //response.setHeader("Pragma", "no-cache");
   //response.setHeader("Cache-Control","no-cache");
   //response.setDateHeader("Expires", 0);

   // the above will b0rk if the servlet engine has already flushed
   // the response prior to including this file, so it should be
   // near the top

   String i2pcontextId = request.getParameter("i2p.contextId");
   try {
       if (i2pcontextId != null) {
           session.setAttribute("i2p.contextId", i2pcontextId);
       } else {
           i2pcontextId = (String) session.getAttribute("i2p.contextId");
       }
   } catch (IllegalStateException ise) {}


      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      net.i2p.router.web.CSSHelper intl = null;
      intl = (net.i2p.router.web.CSSHelper) _jspx_page_context.getAttribute("intl", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (intl == null){
        intl = new net.i2p.router.web.CSSHelper();
        _jspx_page_context.setAttribute("intl", intl, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("intl"), "contextId",
i2pcontextId);


   // used several times below
   String theUserAgent = request.getHeader("User-Agent");
   String theThemePath = intl.getTheme(theUserAgent);


      out.write("<link rel=\"icon\" href=\"");
      out.print(theThemePath);
      out.write("images/favicon.ico\">");

   response.setHeader("Accept-Ranges", "none");

   String cspNonce = Integer.toHexString(net.i2p.util.RandomSource.getInstance().nextInt());

   // clickjacking
   if (intl.shouldSendXFrame()) {
      response.setHeader("X-Frame-Options", "SAMEORIGIN");
      // unsafe-inline is a fallback for browsers not supporting nonce
      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src
      response.setHeader("Content-Security-Policy", "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'nonce-" + cspNonce + "'; form-action 'self'; frame-ancestors 'self'; object-src 'none'; media-src 'none'");
      response.setHeader("X-XSS-Protection", "1; mode=block");
      response.setHeader("X-Content-Type-Options", "nosniff");
   }
   // https://www.w3.org/TR/referrer-policy/
   // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
   // As of Chrome 56, Firefox 50, Opera 43. "same-origin" not widely supported.
   response.setHeader("Referrer-Policy", "no-referrer");

   String conNonceParam = request.getParameter("consoleNonce");
   if (net.i2p.router.web.CSSHelper.getNonce().equals(conNonceParam)) {
       intl.setLang(request.getParameter("lang"));
       intl.setNews(request.getParameter("news"));
   }

      out.write("<link href=\"");
      out.print(theThemePath);
      out.write("console.css?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" rel=\"stylesheet\" type=\"text/css\">\n");

   if (intl.getLang().equals("zh")) {
       // make the fonts bigger for chinese

      out.write("<link href=\"");
      out.print(theThemePath);
      out.write("console_big.css?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" rel=\"stylesheet\" type=\"text/css\">\n");

   } else if (intl.getLang().equals("ar")) {
       // Use RTL theme for Arabic

      out.write("<link href=\"");
      out.print(theThemePath);
      out.write("console_ar.css?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" rel=\"stylesheet\" type=\"text/css\">\n");

   }
   if (!intl.allowIFrame(theUserAgent)) {

      out.write("<meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\" />\n<link href=\"");
      out.print(theThemePath);
      out.write("mobile.css?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" rel=\"stylesheet\" type=\"text/css\">\n");

   }

      out.write('\n');
      out.write('\n');
      out.print(intl.title("New Install Wizard"));
      out.write('\n');

    wizhelper.setContextId(i2pcontextId);
    if (ipg == 3) {

      out.write("\n<script src=\"/js/welcomeajax.js?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" type=\"text/javascript\"></script>\n<script nonce=\"");
      out.print(cspNonce);
      out.write("\" type=\"text/javascript\">\n/* @license http://creativecommons.org/publicdomain/zero/1.0/legalcode CC0-1.0 */\n\n  var failMessage = \"<b>");
      out.print(intl._t("Router is down"));
      out.write("<\\/b>\";\n  var progressMessage = \"<b>");
      out.print(intl._t("Bandwidth test in progress..."));
      out.write("<\\/b>\";\n  var doneMessage = \"<b>");
      out.print(intl._t("Bandwidth test is complete, click Next"));
      out.write("<\\/b>\";\n  function requestAjax1() { ajax(\"/welcomexhr1.jsp\", \"xhr\", \"1000\"); }\n  function initAjax() {\n     document.getElementById(\"xhr\").innerHTML = progressMessage;\n     setTimeout(requestAjax1, \"1000\");\n  }\n  document.addEventListener(\"DOMContentLoaded\", function() {\n      initAjax();\n  }, true);\n\n/* @license-end */\n</script>\n");

    }  // ipg == 3

      out.write("\n</head><body>\n<div id=\"wizard\" class=\"overlay\">\n\n");
      net.i2p.router.web.helpers.WizardHandler formhandler = null;
      formhandler = (net.i2p.router.web.helpers.WizardHandler) _jspx_page_context.getAttribute("formhandler", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (formhandler == null){
        formhandler = new net.i2p.router.web.helpers.WizardHandler();
        _jspx_page_context.setAttribute("formhandler", formhandler, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\n');
      out.write('\n');

    // Bind the session-scope Helper to the request-scope Handler
    formhandler.setWizardHelper(wizhelper);

      out.write("\n<div class=\"wizardnotice\">\n");

    /*
     *  Does the standard setup for all form handlers, then
     *  displays the message box (which drives the form processing).
     *
     *  Included ~15 times, keep whitespace to a minimum
     *
     *  Include this directly after the line:
     *  <jsp:useBean class="net.i2p.router.web.helpers.xxxHandler" id="formhandler" scope="request" />
     */

    // This initializes the RouterContext - must be the first thing
    // i2pcontextId set in css.jsi
    formhandler.setContextId(i2pcontextId);

    // Prevents any saves via GET
    formhandler.storeMethod(request.getMethod());

    // Store the nonces for verification
    String klass = formhandler.getClass().getName();
    String nonceAttr1 = klass + ".nonce";
    String nonceAttr2 = nonceAttr1 + "Prev";
    String nonce1 = null;
    try {
        // Jetty doesn't seem to ISE here...
        nonce1 = (String) session.getAttribute(nonceAttr1);
        String nonce2 = (String) session.getAttribute(nonceAttr2);
        formhandler.storeNonces(nonce1, nonce2);
    } catch (IllegalStateException ise) {
        // nonce1 will be null, removed in setAttibute below
    }


    String contentType = request.getContentType();
    if (contentType != null && contentType.toLowerCase(java.util.Locale.US).startsWith( "multipart/form-data")) {
        // For multipart/form-data, we must decode things enough to get the action and nonce
        // so FormHandler will validate.
        // The handler must get everything else through the wrapper. No other properties will be set.
        // All parameters other than nonce and action must be retrieved through the wrapper.
        // Warning, parameters are NOT XSS filtered.
        net.i2p.servlet.RequestWrapper requestWrapper = new net.i2p.servlet.RequestWrapper(request);
        String action = requestWrapper.getParameter("action");
        if (action != null)
            formhandler.setAction(action);
        String nonce = requestWrapper.getParameter("nonce");
        if (nonce != null)
            formhandler.setNonce(nonce);
        formhandler.setRequestWrapper(requestWrapper);
    } else {
        // Put all the params in the map, some handlers use this instead of individual setters
        // We also call all of the setters below.
        formhandler.setSettings(request.getParameterMap());

      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("formhandler"), request);

    }

      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((net.i2p.router.web.helpers.WizardHandler)_jspx_page_context.findAttribute("formhandler")).getAllMessages())));


    // Only call this once per page, do not getProperty("newNonce") elsewhere,
    // use the variable instead.
    // This shuffles down the nonces, so it must be after getAllMessages() above,
    // since it does the form validation.
    String pageNonce = formhandler.getNewNonce();
    try {
        // Jetty waits to ISE until here....
        session.setAttribute(nonceAttr2, nonce1);
        session.setAttribute(nonceAttr1, pageNonce);
    } catch (IllegalStateException ise) {}


      out.write('\n');
      out.write("\n</div>\n<form action=\"\" method=\"POST\">\n<input type=\"hidden\" name=\"nonce\" value=\"");
      out.print(pageNonce);
      out.write("\">\n<input type=\"hidden\" name=\"action\" value=\"blah\" >\n<input type=\"hidden\" name=\"page\" value=\"");
      out.print((ipg + 1));
      out.write("\" >\n");

    if (ipg == 1) {
        // language selection

      out.write('\n');
      net.i2p.router.web.helpers.ConfigUIHelper uihelper = null;
      uihelper = (net.i2p.router.web.helpers.ConfigUIHelper) _jspx_page_context.getAttribute("uihelper", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (uihelper == null){
        uihelper = new net.i2p.router.web.helpers.ConfigUIHelper();
        _jspx_page_context.setAttribute("uihelper", uihelper, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("uihelper"), "contextId",
i2pcontextId);
      out.write('\n');
      out.write("<div id=\"config_ui\">\n");
      out.write("<input type=\"hidden\" name=\"consoleNonce\" value=\"");
      out.print(net.i2p.router.web.CSSHelper.getNonce());
      out.write("\" >\n<img class=\"wizard progress\" src=\"/themes/console/images/wizard/wizardlogo.png\">\n<h3 id=\"wizardheading\" class=\"wizard\">");
      out.print(uihelper._t("Select Language"));
      out.write("</h3>\n<img class=\"wizardimg\" src=\"/themes/console/images/wizard/step-0.png\">\n<div class=\"clickableProgression\">\n<span class=\"currentProgression\">&#x2B24;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n</div>\n<div id=\"wizlangsettings\" class=\"wizard\">\n");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((net.i2p.router.web.helpers.ConfigUIHelper)_jspx_page_context.findAttribute("uihelper")).getLangSettings())));
      out.write("\n</div>\n<div class=\"wizardtext\">\n<p>\n\n");
      out.print(intl._t("This project is supported by volunteer translators on Transifex."));
      out.write('\n');
      out.print(intl._t("This helps keep I2P accessible to everyone all over the world."));
      out.write('\n');
      out.print(intl._t("Thank you to all of the volunteers all over the world who help make I2P accessible."));
      out.write('\n');
      out.print(intl._t("If you would like to get involved, {0}please consider the I2P translation efforts{1}.", "<a href=\"https://www.transifex.com/projects/p/I2P/\" target=\"_blank\">", "</a>"));
      out.write("\n</p>\n<p>\n");
      out.print(intl._t("Please select your preferred language:"));
      out.write("\n</p>\n</div>\n</div>\n");


    } else if (ipg == 2) {
        // Overview of bandwidth test

      out.write("\n<img class=\"wizard progress\" src=\"/themes/console/images/wizard/wizardlogo.png\">\n<h3 id=\"wizardheading\" class=\"wizard\">");
      out.print(intl._t("Bandwidth Test"));
      out.write("</h3>\n<img class=\"wizardimg\" src=\"/themes/console/images/wizard/step-2.png\">\n<div class=\"clickableProgression\">\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"currentProgression\">&#x2B24;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n</div>\n<div class=\"wizardtext\">\n<p>\n");
      out.print(intl._t("Let's check your internet connection!"));
      out.write("\n</p>\n<p>\n");
      out.print(intl._t("Bandwidth participation not only makes your speed and connection to the I2P network better, but also helps everyone using the network."));
      out.write('\n');
      out.print(intl._t("When everyone is sharing as much bandwidth as possible, everyone gets to have better performance and privacy by sharing participating traffic."));
      out.write("\n</p>\n<p>\n");
      out.print(intl._t("I2P uses M-Lab, a third party service, to help you test your internet connection and find the optimal speed settings."));
      out.write('\n');
      out.print(intl._t("During this time you will be connected directly to M-Lab's service with your real IP address."));
      out.write("\n</p><p>\n");
      out.print(intl._t("Please review the M-Lab privacy policies linked below."));
      out.write('\n');
      out.print(intl._t("If you do not wish to run the M-Lab bandwidth test, you can skip it and configure your bandwidth later."));
      out.write("\n</p><p>\n");
      out.print(intl._t("{0}M-Lab Privacy Policy{1}", "<a href=\"https://www.measurementlab.net/privacy/\" target=\"_blank\">", "</a>"));
      out.write("\n<br>\n");
      out.print(intl._t("{0}M-Lab Name Server Privacy Policy{1}", "<a href=\"https://github.com/m-lab/mlab-ns/blob/master/MLAB-NS_PRIVACY_POLICY.md\" target=\"_blank\">", "</a>"));
      out.write("\n</p>\n</div>\n");


    } else if (ipg == 3) {
        // Bandwidth test in progress (w/ AJAX)

      out.write("\n<img class=\"wizard progress\" src=\"/themes/console/images/wizard/wizardlogo.png\">\n<h3 id=\"wizardheading\" class=\"wizard\">");
      out.print(intl._t("Bandwidth Test in Progress"));
      out.write("</h3>\n<img class=\"wizardimg\" src=\"themes/console/images/wizard/step-3.png\">\n<div class=\"clickableProgression\">\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"currentProgression\">&#x2B24;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n</div>\n<div id=\"xhr\" class=\"notifcation\">\n<!-- for non-script -->\n");
      out.print(intl._t("Javascript is disabled - wait 60 seconds for the bandwidth test to complete and then click Next"));
      out.write("\n</div>\n<div id=\"xhr2\" class=\"notification\">\n</div>\n<div class=\"wizardtext\">\n<p>\n");
      out.print(intl._t("While the I2P router software is getting ready to go, it's testing your bandwidth, obtaining an initial set of peers from a reseed server, making its first few connections, and getting integrated with the rest of the network."));
      out.write("\n</p>\n<p>\n");
      out.print(intl._t("To learn more about how important I2P Reseed servers are, or explore other topics and what functions they perform for I2P, you can visit the {0}I2P Wiki{1}.", "<a href=\"http://wiki.i2p-projekt.i2p\" target=\"_blank\">", "</a>"));
      out.write('\n');
      out.print(intl._t("If you would like to discuss I2P topics or get help from the community, you can visit the {0}I2P Forums{1}.", "<a href=\"http://i2pforum.net\" target=\"_blank\">", "</a>"));
      out.write('\n');
      out.print(intl._t("If you want to know more about the I2P Project itself, or the Invisible Internet in general, you can visit our {0}Project Website{1}.",
"<a href=\"http://geti2p.net\" target=\"_blank\">", "</a>"));
      out.write("\n</p>\n</div>\n");


    } else if (ipg == 4) {
        // Bandwidth test results
        // and/or manual bw entry?

      out.write('\n');
      net.i2p.router.web.helpers.ConfigNetHelper nethelper = null;
      nethelper = (net.i2p.router.web.helpers.ConfigNetHelper) _jspx_page_context.getAttribute("nethelper", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (nethelper == null){
        nethelper = new net.i2p.router.web.helpers.ConfigNetHelper();
        _jspx_page_context.setAttribute("nethelper", nethelper, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("nethelper"), "contextId",
i2pcontextId);
      out.write('\n');

        if (request.getParameter("skipbw") == null) {
            // don't display this if we skipped the test

      out.write("\n<img class=\"wizard progress\" src=\"/themes/console/images/wizard/wizardlogo.png\">\n<h3 id=\"wizardheading\" class=\"wizard bwtest\">");
      out.print(intl._t("Bandwidth Test Results"));
      out.write("</h3>\n<div class=\"clickableProgression\">\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"currentProgression\">&#x2B24;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n</div>\n<table class=\"mlabtable\">\n<tr><td>");
      out.print(intl._t("Test server location"));
      out.write("</td><td colspan=\"3\">");
      out.print(wizhelper.getServerLocation());
      out.write("</td></tr>\n<tr><td>");
      out.print(intl._t("Completion status"));
      out.write("</td><td colspan=\"3\">");
      out.print(wizhelper.getCompletionStatus());
      out.write("</td></tr>\n");

            if (wizhelper.isNDTSuccessful()) {
                // don't display this if test failed

      out.write("\n<tr><td>");
      out.print(intl._t("Details"));
      out.write("</td><td colspan=\"3\">");
      out.print(wizhelper.getDetailStatus());
      out.write("</td></tr>\n<tr><td>");
      out.print(intl._t("Downstream Bandwidth"));
      out.write("</td><td>");
      out.print(net.i2p.data.DataHelper.formatSize2Decimal(wizhelper.getDownBandwidth()));
      out.write("Bps</td>\n<td>");
      out.print(intl._t("Upstream Bandwidth"));
      out.write("</td><td>");
      out.print(net.i2p.data.DataHelper.formatSize2Decimal(wizhelper.getUpBandwidth()));
      out.write("Bps</td></tr>\n<tr><td>");
      out.print(intl._t("Share of Bandwidth for I2P"));
      out.write("</td><td>");
      out.print(Math.round(net.i2p.router.web.helpers.WizardHelper.BW_SCALE * 100));
      out.write("%</td></tr>\n");

            } // sucessful

      out.write("\n</table>\n");

        } // skipbw

      out.write("\n<img class=\"wizard progress\" src=\"/themes/console/images/wizard/wizardlogo.png\">\n<h3 id=\"wizardheading\" class=\"wizard\">");
      out.print(intl._t("Bandwidth Configuration"));
      out.write("</h3>\n<img class=\"wizardimg\" src=\"/themes/console/images/wizard/step-4.png\">\n<style>\n.bwtest {\n    display: none;\n}\n</style>\n<table id=\"bandwidthconfig\" class=\"configtable wizardtable\">\n<tr><td class=\"infohelp infodiv\" colspan=\"2\">\n");
      out.print(intl._t("I2P will work best if you configure your rates to match the speed of your internet connection."));
      out.write("\n</td></tr>\n<tr><td><input style=\"text-align: right; width: 5em;\" name=\"inboundrate\" type=\"text\" size=\"5\" maxlength=\"5\" value=\"");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((net.i2p.router.web.helpers.WizardHelper)_jspx_page_context.findAttribute("wizhelper")).getInboundBurstRate())));
      out.write("\" >\n");
      out.print(intl._t("KBps In"));
      out.write("\n</td><td>(");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((net.i2p.router.web.helpers.WizardHelper)_jspx_page_context.findAttribute("wizhelper")).getInboundBurstRateBits())));
      out.write(")</td>\n</tr>\n<tr>\n");
      out.write("\n<td><input style=\"text-align: right; width: 5em;\" name=\"outboundrate\" type=\"text\" size=\"5\" maxlength=\"5\" value=\"");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((net.i2p.router.web.helpers.WizardHelper)_jspx_page_context.findAttribute("wizhelper")).getOutboundBurstRate())));
      out.write("\" >\n");
      out.print(intl._t("KBps Out"));
      out.write("\n</td><td>(");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((net.i2p.router.web.helpers.WizardHelper)_jspx_page_context.findAttribute("wizhelper")).getOutboundBurstRateBits())));
      out.write(")</td>\n</tr>\n<tr>\n<td>");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((net.i2p.router.web.helpers.ConfigNetHelper)_jspx_page_context.findAttribute("nethelper")).getSharePercentageBox())));
      out.write(' ');
      out.print(intl._t("Share"));
      out.write("</td>\n<td>(");
      out.write(org.apache.jasper.runtime.JspRuntimeLibrary.toString((((net.i2p.router.web.helpers.WizardHelper)_jspx_page_context.findAttribute("wizhelper")).getShareRateBits())));
      out.write(")\n</td></tr>\n</table>\n<div id=\"infodiv\">\n");
 int share = Math.round(wizhelper.getShareBandwidth() * 1.024f);
    if (share < 12) {
        out.print("<b>");
        out.print(intl._t("NOTE"));
        out.print("</b>: ");
        out.print(intl._t("You have configured I2P to share only {0} KBps.", share));
        out.print("</br>");

        out.print(intl._t("I2P requires at least 12KBps to enable sharing. "));
        out.print(intl._t("By donating your bandwidth to participating traffic, you not only help others, you improve your own anonymity and performance."));
        out.print("</br>");
        out.print(intl._t("We recommend sharing 75% or more for I2P, but you can adjust based on your needs."));
    } else {
        out.print(intl._t("You have configured I2P to share {0} KBps.", share));
        out.print("</br>");

        out.print(intl._t("By donating your bandwidth to participating traffic, you not only help others, you improve your own anonymity and performance."));
        out.print("</br>");
        out.print(intl._t("We recommend sharing 75% or more for I2P, but you can adjust based on your needs."));
    }

      out.write("\n</div>\n");


    } else if (ipg == 5) {
        // Browser setup

      out.write("\n<img class=\"wizard progress\" src=\"/themes/console/images/wizard/wizardlogo.png\">\n<h3 id=\"wizardheading\" class=\"wizard\">");
      out.print(intl._t("Browser and Application Setup"));
      out.write("</h3>\n<img class=\"wizardimg\" src=\"/themes/console/images/wizard/step-5.png\">\n<div class=\"clickableProgression\">\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"currentProgression\">&#x2B24;</span>\n<span class=\"unvisitedProgression\">&#x25EF;</span>\n</div>\n<div class=\"wizardtext\"><p>\n");
      out.print(intl._t("Your browser needs to be configured to work with I2P."));
      out.write('\n');
      out.print(intl._t("We have instructions for configuring both Firefox and Chromium based browsers with I2P."));
      out.write('\n');
      out.print(intl._t("You can find these instructions on our {0}website{1}.", "<a href=\"https://geti2p.net/htproxyports\" target=\"_blank\">", "</a>"));
      out.write('\n');

        if (net.i2p.util.SystemVersion.isWindows()) {

      out.write("\n</p><p>\n");
      out.print(intl._t("Otherwise, the recommended way to browse I2P websites is with a separate profile in the Firefox browser."));
      out.write("\n<ol><li>");
      out.print(intl._t("{0}Install Firefox{1}", "<a href=\"https://www.mozilla.org/firefox/\" target=\"_blank\">", "</a>"));
      out.write("\n</li><li>");
      out.print(intl._t("{0}Install the I2P Firefox profile{1}", "<a href=\"https://geti2p.net/firefox\" target=\"_blank\">", "</a>"));
      out.write("\n</li></ol>\n");

        } //isWindows()

      out.write("\n</p>\n<p>\n");
      out.print(intl._t("The I2P router also comes with its own versions of common, useful internet applications."));
      out.write('\n');
      out.print(intl._t("You can download files with {0}bittorrent{1}.", "<a href=\"/torrents\" target=\"_blank\">", "</a>"));
      out.write('\n');
      out.print(intl._t("You can also send and receive {0}email{1}.", "<a href=\"/webmail\" target=\"_blank\">", "</a>"));
      out.write('\n');
      out.print(intl._t("Besides that, you can use the built-in {0}web server{1} so you can create, communicate, and share your content.", "<a href=\"/i2ptunnel\" target=\"_blank\">", "</a>"));
      out.write('\n');
      out.print(intl._t("These applications work with I2P automatically and require no additional configuration."));
      out.write("\n</p>\n<p>\n");
      out.print(intl._t("To help make I2P addresses easier to read and remember, the I2P router also includes its built-in {0}Address Book{1}.", "<a href=\"/dns\" target=\"_blank\">", "</a>"));
      out.write('\n');
      out.print(intl._t("The Address Book is where you keep track of all your I2P \"Contacts\" by giving them human-readable names."));
      out.write('\n');
      out.print(intl._t("This can be used for the sites you like to visit, messaging contacts, or potentially any other service on I2P."));
      out.write('\n');
      out.print(intl._t("To help you get started, the address book can be used to subscribe to lists of addresses distributed by other I2P users."));
      out.write("\n</p>\n</div>\n");


    } else if (ipg == LAST_PAGE) {
        // Done

      out.write("\n<img class=\"wizard progress\" src=\"/themes/console/images/wizard/wizardlogo.png\">\n<h3 id=\"wizardheading\" class=\"wizard\">");
      out.print(intl._t("Welcome to the Invisible Internet!"));
      out.write("</h3>\n<img class=\"wizardimg\" src=\"/themes/console/images/wizard/step-6.png\">\n<div class=\"clickableProgression\">\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"visitedProgression\">&#x25EF;</span>\n<span class=\"currentProgression\">&#x2B24;</span>\n</div>\n<div class=\"wizardtext\">\n<p>\n");
      out.print(intl._t("It will take some time for your peers to integrate your router into the network, but while that is happening you can still explore I2P applications and get to know your way around the router console."));
      out.write('\n');
      out.print(intl._t("There is a quick guide, news about the latest release, an FAQ, and troubleshooting guide available on the {0}console{1} page.", "<a href=\"/console\" target=\"_blank\">", "</a>"));
      out.write("\n</p><p>\n");
      out.print(intl._t("You may notice a message in the sidebar that I2P is rejecting tunnels."));
      out.write('\n');
      out.print(intl._t("This is normal behavior as part of the start-up process, to make sure that your router is ready to help others with participating traffic."));
      out.write('\n');
      out.print(intl._t("When the connection indicators in the sidebar turn green, you are ready to explore the Invisible Internet."));
      out.write("\n</p>\n</div>\n");


    } else {

      out.write("\n<table class=\"configtable wizard\"><tr><td>unknown wizard page</td></tr></table>\n");

    }

      out.write("\n<div class=\"wizardbuttons wizard\">\n<table class=\"configtable wizard\"><tr class=\"wizard\"><td class=\"optionsave wizard\">\n");

    if (ipg != 1) {

      out.write("\n<input type=\"submit\" class=\"back wizardbutton\" name=\"prev\" value=\"");
      out.print(intl._t("Previous"));
      out.write("\" >\n");

    }
    if (ipg != LAST_PAGE) {

      out.write("\n<input type=\"submit\" class=\"cancel wizardbutton\" name=\"skip\" value=\"");
      out.print(intl._t("Skip Setup"));
      out.write("\" >\n");

        if (ipg == 2) {

      out.write("\n<input type=\"submit\" class=\"cancel wizardbutton\" name=\"skipbw\" value=\"");
      out.print(intl._t("Skip Bandwidth Test"));
      out.write("\" >\n");

        } else if (ipg == 3) {

      out.write("\n<input type=\"submit\" class=\"cancel wizardbutton\" name=\"cancelbw\" value=\"");
      out.print(intl._t("Cancel Bandwidth Test"));
      out.write("\" >\n");

        }

      out.write("\n<input type=\"submit\" class=\"go wizardbutton\" name=\"next\" value=\"");
      out.print(intl._t("Next"));
      out.write("\" >\n");

    } else {

      out.write("\n<input type=\"submit\" class=\"accept wizardbutton\" name=\"done\" value=\"");
      out.print(intl._t("Finished"));
      out.write("\" >\n");

    }

      out.write("\n</td></tr></table></div>\n</form>\n</div></body></html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
