/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package net.i2p.router.web.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import net.i2p.router.web.helpers.SummaryHelper;

public final class help_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(9);
    _jspx_dependants.put("/help-reachability.jsi", Long.valueOf(1607264743000L));
    _jspx_dependants.put("/help-sidebar.jsi", Long.valueOf(1607264743000L));
    _jspx_dependants.put("/xhr1.jsi", Long.valueOf(1607264743000L));
    _jspx_dependants.put("/summarynoframe.jsi", Long.valueOf(1607264743000L));
    _jspx_dependants.put("/summary.jsi", Long.valueOf(1607264743000L));
    _jspx_dependants.put("/summaryajax.jsi", Long.valueOf(1607264743000L));
    _jspx_dependants.put("/css.jsi", Long.valueOf(1607264743000L));
    _jspx_dependants.put("/help.jsi", Long.valueOf(1607264743000L));
    _jspx_dependants.put("/help-faq.jsi", Long.valueOf(1607264743000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("net.i2p.router.web.helpers.SummaryHelper");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n<html><head>\n");

   /*
    * This should be included inside <head>...</head>,
    * as it sets the stylesheet.
    *
    * This is included almost 30 times, so keep whitespace etc. to a minimum.
    */

   // http://www.crazysquirrel.com/computing/general/form-encoding.jspx
   if (request.getCharacterEncoding() == null)
       request.setCharacterEncoding("UTF-8");

   // Now that we use POST for most forms, these prevent the back button from working after a form submit
   // Just let the browser do its thing
   //response.setHeader("Pragma", "no-cache");
   //response.setHeader("Cache-Control","no-cache");
   //response.setDateHeader("Expires", 0);

   // the above will b0rk if the servlet engine has already flushed
   // the response prior to including this file, so it should be
   // near the top

   String i2pcontextId = request.getParameter("i2p.contextId");
   try {
       if (i2pcontextId != null) {
           session.setAttribute("i2p.contextId", i2pcontextId);
       } else {
           i2pcontextId = (String) session.getAttribute("i2p.contextId");
       }
   } catch (IllegalStateException ise) {}


      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      net.i2p.router.web.CSSHelper intl = null;
      intl = (net.i2p.router.web.CSSHelper) _jspx_page_context.getAttribute("intl", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (intl == null){
        intl = new net.i2p.router.web.CSSHelper();
        _jspx_page_context.setAttribute("intl", intl, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("intl"), "contextId",
i2pcontextId);


   // used several times below
   String theUserAgent = request.getHeader("User-Agent");
   String theThemePath = intl.getTheme(theUserAgent);


      out.write("<link rel=\"icon\" href=\"");
      out.print(theThemePath);
      out.write("images/favicon.ico\">");

   response.setHeader("Accept-Ranges", "none");

   String cspNonce = Integer.toHexString(net.i2p.util.RandomSource.getInstance().nextInt());

   // clickjacking
   if (intl.shouldSendXFrame()) {
      response.setHeader("X-Frame-Options", "SAMEORIGIN");
      // unsafe-inline is a fallback for browsers not supporting nonce
      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src
      response.setHeader("Content-Security-Policy", "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'nonce-" + cspNonce + "'; form-action 'self'; frame-ancestors 'self'; object-src 'none'; media-src 'none'");
      response.setHeader("X-XSS-Protection", "1; mode=block");
      response.setHeader("X-Content-Type-Options", "nosniff");
   }
   // https://www.w3.org/TR/referrer-policy/
   // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
   // As of Chrome 56, Firefox 50, Opera 43. "same-origin" not widely supported.
   response.setHeader("Referrer-Policy", "no-referrer");

   String conNonceParam = request.getParameter("consoleNonce");
   if (net.i2p.router.web.CSSHelper.getNonce().equals(conNonceParam)) {
       intl.setLang(request.getParameter("lang"));
       intl.setNews(request.getParameter("news"));
   }

      out.write("<link href=\"");
      out.print(theThemePath);
      out.write("console.css?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" rel=\"stylesheet\" type=\"text/css\">\n");

   if (intl.getLang().equals("zh")) {
       // make the fonts bigger for chinese

      out.write("<link href=\"");
      out.print(theThemePath);
      out.write("console_big.css?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" rel=\"stylesheet\" type=\"text/css\">\n");

   } else if (intl.getLang().equals("ar")) {
       // Use RTL theme for Arabic

      out.write("<link href=\"");
      out.print(theThemePath);
      out.write("console_ar.css?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" rel=\"stylesheet\" type=\"text/css\">\n");

   }
   if (!intl.allowIFrame(theUserAgent)) {

      out.write("<meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;\" />\n<link href=\"");
      out.print(theThemePath);
      out.write("mobile.css?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" rel=\"stylesheet\" type=\"text/css\">\n");

   }

      out.print(intl.title("help"));

    if (!intl.getDisableRefresh()) {

      out.write("<script src=\"/js/ajax.js?");
      out.print(net.i2p.CoreVersion.VERSION);
      out.write("\" type=\"text/javascript\"></script>\n<script nonce=\"");
      out.print(cspNonce);
      out.write("\" type=\"text/javascript\">\n/* @license http://creativecommons.org/publicdomain/zero/1.0/legalcode CC0-1.0 */\n\n  var failMessage = \"<hr><b>");
      out.print(intl._t("Router is down"));
      out.write("<\\/b>\";\n  function requestAjax1() { ajax(\"/xhr1.jsp?requestURI=");
      out.print(request.getRequestURI());
      out.write("\", \"xhr\", ");
      out.print(intl.getRefresh());
      out.write("000); }\n  function initAjax() { setTimeout(requestAjax1, ");
      out.print(intl.getRefresh());
      out.write("000);  }\n  initAjax();\n\n/* @license-end */\n</script>");

    }

      out.write("</head><body>\n");
      net.i2p.router.web.NewsHelper newshelper = null;
      newshelper = (net.i2p.router.web.NewsHelper) _jspx_page_context.getAttribute("newshelper", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (newshelper == null){
        newshelper = new net.i2p.router.web.NewsHelper();
        _jspx_page_context.setAttribute("newshelper", newshelper, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("newshelper"), "contextId",
i2pcontextId);

    java.io.File newspath = new java.io.File(net.i2p.I2PAppContext.getGlobalContext().getRouterDir(), "docs/news.xml");

      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("newshelper"), "page",
newspath.getAbsolutePath());
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("newshelper"), "maxLines", "300", null, null, false);
      out.write("<div class=\"routersummaryouter\">\n");

    // The refresh delay, 0 to disable
    String d = "0";
    boolean allowIFrame = intl.allowIFrame(request.getHeader("User-Agent"));
    if (allowIFrame) {
        // skip the iframe if refresh disabled
        d = request.getParameter("refresh");
        String newDelay = "";
        if (d == null || "".equals(d))
            d = intl.getRefresh();
        else {
            long delay;
            try {
                delay = Long.parseLong(d);
            } catch (NumberFormatException nfe) {
                delay = 60;
            }
            // pass the new delay parameter to the iframe
            newDelay = "?refresh=" + delay;
            // update disable boolean
            intl.setDisableRefresh(d);
        }
        if (false && !intl.getDisableRefresh())
            out.print("<noscript><iframe src=\"/summaryframe.jsp" + newDelay + "\" height=\"1500\" width=\"200\" scrolling=\"auto\" frameborder=\"0\" title=\"sidepanel\"></noscript>\n");
    }

      out.write("<div class=\"routersummary\">\n");

    if (allowIFrame) {
        // Display the whole summary bar


/*
 * TODO - the bar would render more cleanly if we specified the img height and width here,
 * but unfortunately the images in the different themes are different sizes.
 * They range in height from 37 to 43 px. But there's a -2 bottom margin...
 * So put it in a div.
 */

      out.write("<div>\n   <a href=\"/\" target=\"_top\">\n    <img src=\"");
      out.print(intl.getTheme(request.getHeader("User-Agent")));
      out.write("images/i2plogo.png\" alt=\"");
      out.print(intl._t("I2P Router Console"));
      out.write("\" title=\"");
      out.print(intl._t("I2P Router Console"));
      out.write("\">\n   </a>\n  </div>\n  <div id=\"xhr\">\n<!-- for non-script -->\n");

/*
 * Note:
 * This is included on every refresh, so keep whitespace etc. to a minimum.
 */

      net.i2p.router.web.helpers.SummaryHelper helper = null;
      helper = (net.i2p.router.web.helpers.SummaryHelper) _jspx_page_context.getAttribute("helper", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (helper == null){
        helper = new net.i2p.router.web.helpers.SummaryHelper();
        _jspx_page_context.setAttribute("helper", helper, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("helper"), "contextId",
i2pcontextId);
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("helper"), "action",
request.getParameter("action"));
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("helper"), "updateNonce",
request.getParameter("updateNonce"));
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("helper"), "consoleNonce",
request.getParameter("consoleNonce"));

    String reqURI = request.getRequestURI();
    if (reqURI.contains("/xhr1"))
        reqURI = request.getParameter("requestURI");
    helper.setRequestURI(reqURI);
    helper.storeWriter(out);
    helper.storeNewsHelper(newshelper);
/*
 * The following is required for the reseed button to work, although we probably
 * only need the reseedNonce property.
 */

      net.i2p.router.web.helpers.ReseedHandler reseed = null;
      reseed = (net.i2p.router.web.helpers.ReseedHandler) _jspx_page_context.getAttribute("reseed", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (reseed == null){
        reseed = new net.i2p.router.web.helpers.ReseedHandler();
        _jspx_page_context.setAttribute("reseed", reseed, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("reseed"), request);

/*
 * The following is required for the update buttons to work, although we probably
 * only need the updateNonce property.
 */

      net.i2p.router.web.UpdateHandler update = null;
      update = (net.i2p.router.web.UpdateHandler) _jspx_page_context.getAttribute("update", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (update == null){
        update = new net.i2p.router.web.UpdateHandler();
        _jspx_page_context.setAttribute("update", update, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("update"), request);
      org.apache.jasper.runtime.JspRuntimeLibrary.handleSetProperty(_jspx_page_context.findAttribute("update"), "contextId",
i2pcontextId);

    // moved to java for ease of translation
    helper.renderSummaryBar();

      out.write("</div>\n");

    } else {
        // Text browsers don't render the two divs side-by-side, so just provide a link
        out.print("<a href=\"/summaryframe\">");
        out.print(intl._t("Sidebar"));
        out.print("</a>");
    }

    // d and allowIFrame defined above
    if (false && !intl.getDisableRefresh()) {
        out.print("</div><noscript></iframe></noscript>\n");
    } else if (false && allowIFrame) {
        // since we don't have an iframe this will reload the base page, and
        // the new delay will be passed to the iframe above
        out.print("<noscript><div class=\"refresh\"><form action=\"" + request.getRequestURI() + "\" method=\"POST\">\n" +
                  "<b>");
        // We have intl defined when this is included, but not when compiled standalone.
        out.print(intl._t("Refresh (s)"));
        out.print(":</b> <input size=\"3\" type=\"text\" name=\"refresh\" value=\"60\" >\n" +
                  "<button type=\"submit\" value=\"Enable\" >");
        // ditto
        out.print(intl._t("Enable"));
        out.print("</button>\n" +
                  "</form></div></noscript></div>\n");
    } else {
        out.print("</div>\n");
    }

      out.write("</div>\n");
      out.write("<h1>");
      out.print(intl._t("I2P Router Help and Support"));
      out.write("</h1>\n<div class=\"main\" id=\"help\">\n<div class=\"confignav\">\n<span class=\"tab\"><a href=\"#sidebarhelp\">");
      out.print(intl._t("Sidebar"));
      out.write("</a></span>\n<span class=\"tab\"><a href=\"#reachabilityhelp\">");
      out.print(intl._t("Reachability"));
      out.write("</a></span>\n<span class=\"tab\"><a href=\"#faq\">");
      out.print(intl._t("FAQ"));
      out.write("</a></span>\n<span class=\"tab\"><a href=\"/viewlicense\">");
      out.print(intl._t("Legal"));
      out.write("</a></span>\n<span class=\"tab\"><a href=\"/viewhistory\">");
      out.print(intl._t("Change Log"));
      out.write("</a></span>\n</div>\n<div id=\"volunteer\">");
      out.write("<h2>");
      out.print(intl._t("Further Assistance"));
      out.write("</h2>\n<p>");
      out.print(intl._t("If you would like to help improve or translate the documentation, or help with other aspects of the project, please see the documentation for <a href=\"http://i2p-projekt.i2p/en/get-involved\" target=\"_blank\">volunteers.</a>"));
      out.write("</p>\n<p>");
      out.print(intl._t("Further assistance is available here:"));
      out.write("</p>\n<ul class=\"links\">\n<li><a href=\"http://i2p-projekt.i2p/en/faq\" target=\"_blank\">");
      out.print(intl._t("FAQ on i2p-projekt.i2p"));
      out.write("</a></li>\n<li><a href=\"http://i2pwiki.i2p/\" target=\"_blank\">");
      out.print(intl._t("I2P Wiki"));
      out.write("</a></li>\n</ul>\n<p>");
      out.print(intl._t("You may also try {0} or {1}.",
"<a href=\"http://i2pforum.i2p/\" target=\"_blank\">" + intl._t("I2P Forum") + "</a>",
"<a href=\"irc://127.0.0.1:6668/i2p\">" + intl._t("I2P's IRC network") + "</a>"));
      out.write("</p>\n");
      out.write("</div>\n<div id=\"sidebarhelp\">");
      out.write("<h2>");
      out.print(intl._t("Sidebar Information"));
      out.write("</h2>\n<p>");
      out.print(intl._t("Many of the stats on the sidebar may be <a href=\"configstats\">configured</a> to be <a href=\"graphs\">graphed</a> for further analysis."));
      out.print(intl._t("You may also customize the sections that appear on the Sidebar and their positioning on the <a href=\"configsidebar\">Sidebar Configuration page</a>."));
      out.write("</p>\n\n<h3>");
      out.print(intl._t("Bandwidth in/out"));
      out.write("</h3>\n<p>");
      out.print(intl._t("This section indicates your average bandwidth speeds and total usage for the session."));
      out.print(intl._t("All values are in bytes per second, not bits per second."));
      out.print(intl._t("You may change your bandwidth limits on the <a href=\"config\">Bandwidth Configuration page</a>."));
      out.print(intl._t("The more bandwidth you make available, the more you help the network and improve your own anonymity, so please take the time to review the settings."));
      out.print(intl._t("Your upstream share amount (KBps Out) will determine your overall contribution to the network."));
      out.write("</p>\n\n\n<h3>");
      out.print(intl._t("Peers"));
      out.write("</h3>\n<ul>\n<li>\n<b>");
      out.print(intl._t("Active"));
      out.write(":</b> ");
      out.print(intl._t("The first number is the number of peers your router has sent or received a message from in the last few minutes."));
      out.print(intl._t("This may range from 8-10 to several hundred, depending on your total bandwidth, shared bandwidth, and locally-generated traffic."));
      out.print(intl._t("The second number is the number of peers seen in the last hour or so."));
      out.print(intl._t("Do not be concerned if these numbers vary widely."));
      out.write("</li>\n<li>\n<b>");
      out.print(intl._t("Fast"));
      out.write(":</b> ");
      out.print(intl._t("This is the number of peers your router has available for building client tunnels."));
      out.print(intl._t("These peers are shown on the <a href=\"profiles\">profiles page</a>."));
      out.write("</li>\n<li><b>");
      out.print(intl._t("High Capacity"));
      out.write(":</b>\n");
      out.print(intl._t("This is the number of peers your router has available for building your exploratory tunnels which are used to determine network performance."));
      out.print(intl._t("The fast peers are included in the high capacity tier."));
      out.print(intl._t("These peers are shown on the <a href=\"profiles\">profiles page</a>."));
      out.write("</li>\n<li>\n<b>");
      out.print(intl._t("Integrated"));
      out.write(":</b> ");
      out.print(intl._t("This is the number of peers your router will use for network database inquiries."));
      out.print(intl._t("These are usually the floodfill routers responsible for maintaining network integrity."));
      out.print(intl._t("These peers are shown on the <a href=\"profiles\">profiles page</a>."));
      out.write("</li>\n<li>\n<b>");
      out.print(intl._t("Known"));
      out.write(":</b> ");
      out.print(intl._t("This is the total number of peers that are known by your router."));
      out.print(intl._t("This may range from under 100 to several thousand."));
      out.print(intl._t("This number is not the total size of the network; it may vary widely depending on your total bandwidth, shared bandwidth, and locally-generated traffic."));
      out.print(intl._t("I2P does not require a router to know every other router in the network."));
      out.write("</li>\n</ul>\n");
      out.write("</div>\n<div id=\"reachabilityhelp\">");
      out.write("<h2>");
      out.print(intl._t("Reachability Help"));
      out.write("</h2>\n<p>\n  ");
      out.print(intl._t("While I2P will work fine behind most firewalls, your speeds and network integration will generally improve if the I2P port is forwarded for both UDP and TCP."));
      out.write("&nbsp;\n  ");
      out.print(intl._t("If you think you have opened up your firewall and I2P still thinks you are firewalled, remember that you may have multiple firewalls, for example both software packages and external hardware routers."));
      out.write("&nbsp;\n  ");
      out.print(intl._t("If there is an error, the <a href=\"logs.jsp\">logs</a> may also help diagnose the problem."));
      out.write("</p>\n<ul id=\"reachability\">\n  <li><b>");
      out.print(intl._t("OK"));
      out.write(":</b>\n     ");
      out.print(intl._t("Your UDP port does not appear to be firewalled."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("Firewalled"));
      out.write(":</b>\n     ");
      out.print(intl._t("Your UDP port appears to be firewalled."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("As the firewall detection methods are not 100% reliable, this may occasionally be displayed in error."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("However, if it appears consistently, you should check whether both your external and internal firewalls are open for your port."));
      out.write("&nbsp; \n     ");
      out.print(intl._t("I2P will work fine when firewalled, there is no reason for concern. When firewalled, the router uses \"introducers\" to relay inbound connections."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("However, you will get more participating traffic and help the network if you open your firewall."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("If you think you have already done so, remember that you may have both a hardware and a software firewall, or be behind an additional, institutional firewall you cannot control."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("Also, some routers cannot correctly forward both TCP and UDP on a single port, or may have other limitations or bugs that prevent them from passing traffic through to I2P."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("Testing"));
      out.write(":</b>\n     ");
      out.print(intl._t("The router is currently testing whether your UDP port is firewalled."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("Hidden"));
      out.write(":</b>\n     ");
      out.print(intl._t("The router is not configured to publish its address, therefore it does not expect incoming connections."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("Hidden mode is automatically enabled for added protection in certain countries."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("WARN - Firewalled and Fast"));
      out.write(":</b>\n     ");
      out.print(intl._t("You have configured I2P to share more than 128KBps of bandwidth, but you are firewalled."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("While I2P will work fine in this configuration, if you really have over 128KBps of bandwidth to share, it will be much more helpful to the network if you open your firewall."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("WARN - Firewalled and Floodfill"));
      out.write(":</b>\n     ");
      out.print(intl._t("You have configured I2P to be a floodfill router, but you are firewalled."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("For best participation as a floodfill router, you should open your firewall."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("WARN - Firewalled with Inbound TCP Enabled"));
      out.write(":</b>\n     ");
      out.print(intl._t("You have configured inbound TCP, however your UDP port is firewalled, and therefore it is likely that your TCP port is firewalled as well."));
      out.print(intl._t("If your TCP port is firewalled with inbound TCP enabled, routers will not be able to contact you via TCP, which will hurt the network."));
      out.print(intl._t("Please open your firewall or disable inbound TCP above."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("WARN - Firewalled with UDP Disabled"));
      out.write(":</b>\n     ");
      out.print(intl._t("You have configured inbound TCP, however you have disabled UDP."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("You appear to be firewalled on TCP, therefore your router cannot accept inbound connections."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("Please open your firewall or enable UDP."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("ERR - Clock Skew"));
      out.write(":</b>\n     ");
      out.print(intl._t("Your system's clock is skewed, which will make it difficult to participate in the network."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("Correct your clock setting if this error persists."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("ERR - Private TCP Address"));
      out.write(":</b>\n     ");
      out.print(intl._t("You must never advertise an unroutable IP address such as 127.0.0.1 or 192.168.1.1 as your external address."));
      out.print(intl._t("Correct the address or disable inbound TCP on the Network Configuration page."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("ERR - SymmetricNAT"));
      out.write(":</b>\n     ");
      out.print(intl._t("I2P detected that you are firewalled by a Symmetric NAT."));
      out.print(intl._t("I2P does not work well behind this type of firewall. You will probably not be able to accept inbound connections, which will limit your participation in the network."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("ERR - UDP Port In Use - Set i2np.udp.internalPort=xxxx in advanced config and restart"));
      out.write(":</b>\n     ");
      out.print(intl._t("I2P was unable to bind to the configured port noted on the advanced network configuration page ."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("Check to see if another program is using the configured port. If so, stop that program or configure I2P to use a different port."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("This may be a transient error, if the other program is no longer using the port."));
      out.write("&nbsp; \n     ");
      out.print(intl._t("However, a restart is always required after this error."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("ERR - UDP Disabled and Inbound TCP host/port not set"));
      out.write(":</b>\n     ");
      out.print(intl._t("You have not configured inbound TCP with a hostname and port on the Network Configuration page, however you have disabled UDP."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("Therefore your router cannot accept inbound connections."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("Please configure a TCP host and port on the Network Configuration page or enable UDP."));
      out.write("</li>\n  <li><b>");
      out.print(intl._t("ERR - Client Manager I2CP Error - check logs"));
      out.write(":</b>\n     ");
      out.print(intl._t("This is usually due to a port 7654 conflict. Check the logs to verify."));
      out.write("&nbsp;\n     ");
      out.print(intl._t("Do you have another I2P instance running? Stop the conflicting program and restart I2P."));
      out.write("</li>\n</ul>\n\n<h3>");
      out.print(intl._t("Clock Skew"));
      out.write("</h3>\n<p>\n");
      out.print(intl._t("The skew (offset) of your computer's clock relative to the network-synced time."));
      out.print(intl._t("I2P requires your computer's time be accurate."));
      out.print(intl._t("If the skew is more than a few seconds, please correct the problem by adjusting your computer's time."));
      out.print(intl._t("If I2P cannot connect to the internet, a reading of 0ms may be indicated."));
      out.write("</p>\n");
      out.write("</div>\n<div id=\"faq\">");
      out.write("<h2>");
      out.print(intl._t("Abridged I2P FAQ"));
      out.write("</h2>\n<p class=\"infohelp\">");
      out.print(intl._t("This is a shortened version of the official FAQ."));
      out.print(intl._t("For the full version, please visit {0} or {1}.",
"<a href=\"https://geti2p.net/faq\" target=\"_blank\">geti2p.net/faq</a>",
"<a href=\"http://i2p-projekt.i2p/faq\" target=\"_blank\">i2p-projekt.i2p/faq</a>"));
      out.write("<h3>");
      out.print(intl._t("My router has been up for several minutes and has zero or very few connections"));
      out.write("</h3>\n<p>");
      out.print(intl._t("If after a few minutes of uptime your router is indicating 0 Active Peers and 0 Known Peers, with a notification in the sidebar that you need to check your network connection, verify that you can access the internet."));
      out.print(intl._t("If your internet connection is functional, you may need to unblock Java in your firewall."));
      out.print(intl._t("Otherwise, you may need to reseed your I2P router. Visit the <a href=\"/configreseed#reseedconfig\">Reseed Configuration page</a> and click the \"Save Changes and Reseed Now\" button."));
      out.write("</p>\n\n<h3>");
      out.print(intl._t("My router has very few active peers, is this OK?"));
      out.write("</h3>\n<p>");
      out.print(intl._t("If your router has 10 or more active peers, everything is fine."));
      out.print(intl._t("The router should maintain connections to a few peers at all times."));
      out.print(intl._t("The best way to stay connected to the network is to <a href=\"/config\">share more bandwidth</a>."));
      out.write("</p>\n\n<h3 id=\"addressbooksubs\">");
      out.print(intl._t("I am missing lots of hosts in my addressbook. What are some good subscription links?"));
      out.write("</h3>\n<p>");
      out.print(intl._t("The default subscription is to {0} which is seldom updated.", "<code>i2p-projekt.i2p</code>"));
      out.print(intl._t("If you don't have another subscription, you may use \"jump\" links which are slower, but ensure that your addressbook only contains the default addresses and sites that you use."));
      out.print(intl._t("To speed up browsing on I2P, it's a good idea to add some addressbook subscriptions."));
      out.write("</p>\n\n<p>");
      out.print(intl._t("Here are some other public addressbook subscription links."));
      out.print(intl._t("You may wish to add one or two to your <a href=\"/susidns/subscriptions\">subscription list</a>."));
      out.write("<ul>\n<li><code>http://stats.i2p/cgi-bin/newhosts.txt</code></li>\n<li><code>http://no.i2p/export/alive-hosts.txt</code></li>\n<li><code>http://identiguy.i2p/hosts.txt</code></li>\n</ul>\n\n<p>");
      out.print(intl._t("Note that subscribing to a hosts.txt service is an act of trust, as a malicious subscription could give you incorrect addresses, so be careful subscribing to lists from unknown sources."));
      out.print(intl._t("The operators of these services may have various policies for listing hosts."));
      out.print(intl._t("Presence on this list does not imply endorsement."));
      out.write("</p>\n\n<h3>");
      out.print(intl._t("How do I access IRC, BitTorrent, or other services on the regular Internet?"));
      out.write("</h3>\n<p>");
      out.print(intl._t("Unless an outproxy has been set up for the service you want to connect to, this is not possible."));
      out.print(intl._t("There are only three types of outproxies running right now: HTTP, HTTPS, and email."));
      out.print(intl._t("Note that there is currently no public SOCKS outproxy."));
      out.write("</p>\n\n<h3>");
      out.print(intl._t("How do I configure my browser to access I2P websites?"));
      out.write("</h3>\n<p>");
      out.print(intl._t("You will need to configure your browser to use the HTTP proxy server on host <code>127.0.0.1</code> port <code>4444</code>)."));
      out.print(intl._t("See the {0} for a more detailed explanation.",
"<a href=\"https://geti2p.net/en/about/browser-config\" target=\"_blank\">" + intl._t("Browser Proxy Configuration Guide") + "</a>"));
      out.write("</p>\n\n<h3>");
      out.print(intl._t("What is an eepsite?"));
      out.write("</h3>\n<p>");
      out.print(intl._t("An eepsite is a website that is hosted anonymously on the I2P network."));
      out.print(intl._t("You can access it by configuring your web browser to use I2P's HTTP proxy and browsing to the website."));
      out.write("</p>\n\n<h3>");
      out.print(intl._t("Most of the eepsites are down?"));
      out.write("</h3>\n<p>");
      out.print(intl._t("If you consider every eepsite that has ever been created, yes, most of them are down."));
      out.print(intl._t("People and eepsites come and go."));
      out.print(intl._t("A good way to get started in I2P is check out a list of eepsites that are currently up."));
      out.print(intl._t("{0} tracks active eepsites.",
"<a href=\"http://identiguy.i2p\" target=\"_blank\">identiguy.i2p</a>"));
      out.write("</p>\n\n<h3>");
      out.print(intl._t("How do I connect to IRC within I2P?"));
      out.write("</h3>\n<p>");
      out.print(intl._t("A tunnel to the main IRC server network within I2P, Irc2P, is automatically started when the I2P router starts."));
      out.print(intl._t("To connect to it, tell your IRC client to connect to server: <code>127.0.0.1</code> port: <code>6668</code>."));
      out.write("</p>\n\n<p>");
      out.print(intl._t("HexChat-like client users can create a new network with the server <code>127.0.0.1/6668</code>, or you can connect with the command <code>/server 127.0.0.1 6668</code>."));
      out.print(intl._t("Different IRC clients may require a different command, consult the client documentation."));
      out.write("</p>\n\n<h3>");
      out.print(intl._t("What ports does I2P use?"));
      out.write("</h3>\n<table id=\"portfaq\">\n<tr><th colspan=\"3\">");
      out.print(intl._t("Local ports"));
      out.write("</th></tr>\n<tr><td colspan=\"3\" class=\"infohelp\">");
      out.print(intl._t("These are the local I2P port mappings, listening only to local connections by default, except where noted."));
      out.print(intl._t("Unless you require access from other machines, they should only be accessible from localhost."));
      out.write("</td></tr>\n<tr><th>");
      out.print(intl._t("Port"));
      out.write("</th><th>");
      out.print(intl._t("Function"));
      out.write("</th><th>");
      out.print(intl._t("Notes"));
      out.write("</th></tr>\n<tr><td>1900</td>\n<td>UPnP SSDP UDP multicast listener</td>\n<td>Cannot be changed. \nBinds to all interfaces. \nCan be disabled on the <a href=\"/confignet\">Network Configuration page</a>.</td></tr>\n<tr><td>2827</td>\n<td>BOB bridge</td>\n<td>A higher level socket API for clients. \nCan be enabled/disabled on the <a href=\"/configclients\">Client Configuration page</a>. \nCan be changed in the <code>bob.config</code> file. [Disabled by default]</td></tr>\n<tr><td>4444</td>\n<td>HTTP proxy</td>\n<td>Can be disabled or changed in the <a href=\"/i2ptunnelmgr\">I2P Tunnel Manager</a>. \nCan also be configured to bind to a specific interface or all interfaces.</td></tr>\n<tr><td>4445</td>\n<td>HTTPS proxy</td>\n<td>Can be disabled or changed in the <a href=\"/i2ptunnelmgr\">I2P Tunnel Manager</a>. \nCan also be configured to bind to a specific interface or all interfaces.</td></tr>\n<tr><td>6668</td>\n<td>IRC proxy</td>\n<td>Can be disabled or changed in the <a href=\"/i2ptunnelmgr\">I2P Tunnel Manager</a>. \nCan also be configured to bind to a specific interface or all interfaces.</td></tr>\n");
      out.write("<tr><td>7652</td>\n<td>UPnP HTTP TCP event listener</td>\n<td>Binds to the LAN address. Can be changed with advanced config <code>i2np.upnp.HTTPPort=nnnn</code>. \nCan be disabled on the <a href=\"/confignet\">Network Configuration page</a>.</td></tr>\n<tr><td>7653</td>\n<td>UPnP SSDP UDP search response listener</td>\n<td>Binds to all interfaces. \nCan be changed with advanced config <code>i2np.upnp.SSDPPort=nnnn</code>. \nCan be disabled on the <a href=\"/configclients\">Client Configuration page</a>.</td></tr>\n<tr><td>7654</td>\n<td>I2P Client Protocol port</td>\n<td>Used by client apps. Can be changed to a different port on the <a href=\"/configclients\">Client Configuration page</a> but this is not recommended. \nCan be bound to a different interface or all interfaces, or disabled, on the <a href=\"/configclients\">Client Configuration page</a>.</td></tr>\n<tr><td>7655</td>\n<td>UDP for SAM bridge</td>\n<td>A higher level socket API for clients. \nOnly opened when a SAM V3 client requests a UDP session. \nCan be enabled/disabled on the <a href=\"/configclients\"> Client Configuration page</a>. \n");
      out.write("Can be changed in the <code>clients.config</code> file with the SAM command line option <code>sam.udp.port=nnnn</code>.</td></tr>\n<tr><td>7656</td>\n<td>SAM bridge</td>\n<td>A higher level socket API for clients. \nCan be enabled/disabled on the <a href=\"/configclients\">Client Configuration page</a>. \nCan be changed in the <code>clients.config</code> file. [Disabled by default]</td></tr>\n<tr><td>7657</td>\n<td>I2P Router Console (Web interface)</td>\n<td>Can be disabled in the <code>clients.config</code> file. \nCan also be configured to bind to a specific interface or all interfaces in that file. \nIf you make the Router Console available over the network, you might wish to <a href=\"/configui#passwordheading\">enforce an access password</a> to prevent unauthorized access.</td></tr>\n<tr><td>7658</td>\n<td>I2P Web Server</td>\n<td>Can be disabled in the <code>clients.config</code> file. \nCan also be configured to bind to a specific interface or all interfaces in the <code>jetty.xml</code> file.</td>\n</tr>\n<tr><td>7659</td>\n");
      out.write("<td>Outgoing mail to smtp.postman.i2p</td>\n<td>Can be disabled or changed in the <a href=\"/i2ptunnelmgr\">I2P Tunnel Manager</a>. \nCan also be configured to bind to a specific interface or all interfaces.</td></tr>\n<tr><td>7660</td>\n<td>Incoming mail from pop.postman.i2p</td>\n<td>Can be disabled or changed in the <a href=\"/i2ptunnelmgr\">I2P Tunnel Manager</a>. \nCan also be configured to bind to a specific interface or all interfaces.</td></tr>\n<tr><td>8998</td>\n<td>mtn.i2p2.i2p (I2P's Monotone DVCS)</td>\n<td>Can be disabled or changed in the <a href=\"/i2ptunnelmgr\">I2P Tunnel Manager</a>. \nCan also be configured to bind to a specific interface or all interfaces. [Disabled by default]</td></tr>\n<tr><td>31000</td>\n<td>Local connection to wrapper control channel port</td>\n<td>Outbound to 32000 only, does not listen on this port. \nStarts at 31000 and will increment until 31999 looking for a free port. \nTo change, see the <a href=\"http://wrapper.tanukisoftware.com/doc/english/prop-port.html\" target=\"_blank\">wrapper documentation</a>.</td></tr>\n");
      out.write("<tr><td>32000</td>\n<td>Local control channel for the service wrapper</td>\n<td>To change, see the <a href=\"http://wrapper.tanukisoftware.com/doc/english/prop-port.html\" target=\"_blank\">wrapper documentation</a>.</td></tr>\n\n<tr><th colspan=\"3\">");
      out.print(intl._t("Internet facing ports"));
      out.write("</th></tr>\n<tr><td colspan=\"3\" class=\"infohelp\">");
      out.print(intl._t("I2P selects a random port to communicate with other routers when the program is run for the first time."));
      out.print(intl._t("The selected port is shown on the <a href=\"/confignet\">Network Configuration page</a>."));
      out.write("</td></tr>\n<tr><td colspan=\"3\">Outbound UDP from the <a href=\"/confignet#udpconfig\">random port</a> noted on the Network Configuration page to arbitrary remote UDP ports, allowing replies.</td></tr>\n<tr><td colspan=\"3\">Outbound TCP from random high ports to arbitrary remote TCP ports.</td></tr>\n<tr><td colspan=\"3\">Inbound UDP to the <a href=\"/confignet#udpconfig\">port</a> noted on the Network Configuration page from arbitrary locations (optional, but recommended).</td></tr>\n<tr><td colspan=\"3\">Inbound TCP to the <a href=\"/confignet#externaltcp\">port</a> noted on the Network Configuration page from arbitrary locations (optional, but recommended). \n<a href=\"/confignet#tcpconfig\">Inbound TCP</a> may be disabled on the Network Configuration page.</td></tr>\n<tr><td colspan=\"3\">Outbound UDP on port 123, allowing replies: this is necessary for I2P's internal time sync (via SNTP - querying a random SNTP host in <code>pool.ntp.org</code> or another server you specify).</td></tr>\n</table>\n");
      out.write("</div>\n</div></body></html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
